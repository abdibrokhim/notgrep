{
	"avatar_url": "https://avatars.githubusercontent.com/u/92748035?v=4",
	"hits": {
		"hits": [
			{
				"content": {
					"full": "'use client';\n\n<b>import React</b>, { useState, useEffect } from 'react';\nimport { Analytics } from \"@vercel/analytics/react\";\nimport { useRouter } from 'next/navigation'\nimport Image from \"next/image\";\nimport './pages.css';\n// import OverlayCard from './overlaycard';\n\n\nexport default function Home() {\n  const router = useRouter()\n\n  const [loading, setLoading] = useState(false);\n  const [wordCount, setWordCount] = useState(0);\n  const [humanizedTextWordCount, setHumanizedTextWordCount] = useState(0);\n  const [text, setText] = useState('');\n  const [humanizedText, setHumanizedText] = useState('');\n  const [toggleCopy, setToggleCopy] = useState(false);\n  const [isUsedOneTime, setIsUsedOneTime] = useState(false);\n\n  useEffect(() => {\n    const usedOneTime = localStorage.getItem('isUsedOneTime') === 'true';\n    setIsUsedOneTime(usedOneTime);\n  }, []);\n\n  const humanaizeAiText = async (aiText: string) => {\n    console.log('Sending POST request /api/humanaize');\n    try {\n      const response = await fetch('/api/humanaize', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ aiText }),\n      });\n\n      if (!response.ok) {\n        // throw new Error('API request failed');\n        console.log('API request failed');\n      }\n\n      const data = await response.json();\n      return data.message;\n    } catch (error) {\n      console.log('An error occurred while fetching the reply.');\n      console.error('Error:', error);\n      // alert('An error occurred while fetching the reply.');\n      // return 'No response available';\n      // send request to /api/gpt\n      console.log('Trying GPT...');\n      return tryGpt(aiText);\n    } finally {\n      console.log('POST request /api/humanaize completed');\n    }\n  };\n  \n  const tryGpt = async (aiText: string) => {\n    console.log('Sending POST request /api/gpt');\n    try {\n      const response = await fetch('/api/gpt', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ aiText }),\n      });\n\n      if (!response.ok) {\n        // throw new Error('API request failed');\n        console.log('API request failed');\n      }\n\n      const data = await response.json();\n      return data.message;\n    } catch (error) {\n      console.log('An error occurred while fetching the reply.');\n      console.error('Error:', error);\n      alert('An error occurred while fetching the reply.');\n      return 'No response available';\n    } finally {\n      console.log('POST request /api/gpt completed');\n    }\n  };\n  \n  const handleHumanize = () => {\n    console.log('Humanizing...');\n    setLoading(true);\n    tryGpt(text)\n      .then((humanized) => {\n        setHumanizedText(humanized);\n        const count = humanized.trim() === '' ? 0 : humanized.trim().split(/\\s+/).length;\n        setHumanizedTextWordCount(count);\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    const count = text.trim() === '' ? 0 : text.trim().split(/\\s+/).length;\n    setWordCount(count);\n  }, [text]);\n\n  const loader = () => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 24 24\">\n      <circle cx={4} cy={12} r={3} fill=\"currentColor\">\n        <animate id=\"svgSpinners3DotsScale0\" attributeName=\"r\" begin=\"0;svgSpinners3DotsScale1.end-0.25s\" dur=\"0.75s\" values=\"3;.2;3\" />\n      </circle>\n      <circle cx={12} cy={12} r={3} fill=\"currentColor\">\n        <animate attributeName=\"r\" begin=\"svgSpinners3DotsScale0.end-0.6s\" dur=\"0.75s\" values=\"3;.2;3\" />\n      </circle>\n      <circle cx={20} cy={12} r={3} fill=\"currentColor\">\n        <animate id=\"svgSpinners3DotsScale1\" attributeName=\"r\" begin=\"svgSpinners3DotsScale0.end-0.45s\" dur=\"0.75s\" values=\"3;.2;3\" />\n      </circle>\n    </svg>\n  );\n\n  return (\n    <div className=\"grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen pb-28 gap-8 p-4 font-[family-name:var(--font-geist-sans)]\">\n      <Analytics />\n      <main className=\"flex flex-col gap-8 row-start-2 items-center\">\n        <div className=\"Editor_title3__hWeAn \">\n          <h1 className=\"Editor_editor__header__GIEq6 font-bold bg-white dark:bg-background dark:text-white\"><span className='italic font-black'>HumanAIze </span>AI text</h1>\n          <h2 className=\"Editor_editor__subheader__uH98a font-bold bg-white dark:bg-background dark:text-white\">HumanAIze AI text with the smartest AI humanizer</h2>\n          <p className=\"Editor_editor__description__sjr_h bg-white dark:bg-background dark:text-white\">Transform your AI-generated content into natural, human-like text with the ultimate HumanAIze AI text tool. This ai-to-human text converter effortlessly converts output from ChatGPT, Bard, Jasper, Grammarly, GPT4, and other AI text generators into text indistinguishable from human writing. Achieve 100% originality and enhance your content creation with the best HumanAIze AI solution available.</p>\n          <div className='bg-background text-black dark:bg-foreground p-2'>\n            <a\n              className=\"flex items-center\"\n              href=\"https://aimlapi.com/?via=ibrohim\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <Image \n                src=\"/powered_by_aimlapi.svg\"\n                alt=\"Powered by AIML API\"\n                width={120}\n                height={120}\n              />\n            </a>\n          </div>\n        </div>\n        <div className=\"flex gap-2 items-center flex-col lg:flex-row\">\n          <div className=\"bg-white dark:bg-background p-4\">\n            <div className=\"relative\">\n              <textarea\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                className=\"w-[600px] h-[400px] p-4 pb-12 dark:bg-background dark:text-white border border-solid border-gray-600 rounded-lg focus:outline-none resize-none focus:ring-2 focus:ring-[#333] focus:border-transparent\"\n                placeholder=\"Paste your AI-generated text here\"\n              ></textarea>\n              <div className=\"absolute bottom-4 left-4 dark:bg-foreground dark:text-black bg-black text-white px-2 py-1 rounded-md text-sm text-gray-100 shadow\">\n                {wordCount} words\n              </div>\n              <button\n                className={`absolute bottom-4 right-4 dark:bg-foreground dark:text-black bg-black text-white rounded-md shadow border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-gray-100 gap-2 hover:bg-[#aeaeae] dark:hover:bg-[#aeaeae] text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 \n                  ${(loading || text.trim().length < 100) ? 'cursor-not-allowed opacity-50' : 'cursor-pointer'}\n                `}\n                onClick={text.trim().length > 100 ? handleHumanize : undefined}\n                disabled={loading}\n              >\n                {loading ? loader() : 'Humanize'}\n              </button>\n            </div>\n          </div>\n          <div className=\"bg-white dark:bg-background p-4\">\n            <div className=\"relative\">\n              <textarea \n                disabled={true}\n                value={humanizedText}\n                className=\"bg-white p-4 w-[600px] h-[400px] p-4 dark:bg-background dark:text-white border border-solid border-gray-600 rounded-lg focus:outline-none outline-none resize-none focus:ring-2 focus:ring-[#333] focus:border-transparent\" \n                placeholder=\"Humanized text will appear here\">\n              </textarea>\n              <div className=\"absolute bottom-4 left-4 dark:bg-foreground dark:text-black bg-black text-white px-2 py-1 rounded-md text-sm text-gray-100 shadow\">\n                {humanizedTextWordCount} words\n              </div>\n              <button \n                disabled={(!loading) ? false : true}\n                className={`absolute bottom-4 right-4 dark:bg-foreground dark:text-black bg-black text-white flex flex-row gap-1 items-center bg-foreground px-2 py-1 rounded-md text-sm text-gray-100 shadow \n                  ${(loading) ? 'cursor-not-allowed opacity-50' : 'cursor-pointer'}\n                `}\n                onClick={() => {\n                  if (!loading) {\n                    navigator.clipboard.writeText(humanizedText);\n                    setToggleCopy(true);\n                    setTimeout(() => {\n                      setToggleCopy(false);\n                    }, 1000);\n                  }\n                }}\n              >\n                <Image\n                  aria-hidden\n                  className='dark:bg-black'\n                  src={!toggleCopy ? '/copy.svg' : '/check.svg'}\n                  alt=\"Copy icon\"\n                  width={16}\n                  height={16}\n                /> \n                copy\n              </button>\n            </div>\n          </div>\n        </div>\n      </main>\n      <footer className=\"row-start-3 flex flex-col gap-6 flex-wrap items-center justify-center mt-8\">\n        <div className='flex gap-6 flex-wrap items-center justify-center bg-white dark:bg-background dark:text-white p-2'>\n          <a\n            className=\"flex items-center gap-2 hover:underline hover:underline-offset-4\"\n            href=\"https://twitter.com/abdibrokhim\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Image\n              aria-hidden\n              className='dark:bg-white'\n              src=\"/X_logo_2023_original.svg\"\n              alt=\"X icon\"\n              width={16}\n              height={16}\n            />\n            X (prev. Twitter)\n          </a>\n          <a\n            className=\"flex items-center gap-2 hover:underline hover:underline-offset-4\"\n            href=\"https://www.linkedin.com/in/abdibrokhim/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Image\n              aria-hidden\n              className='dark:bg-white'\n              src=\"/LinkedIn_icon.svg\"\n              alt=\"LinkedIn icon\"\n              width={16}\n              height={16}\n            />\n            LinkedIn\n          </a>\n          <a\n            className=\"flex items-center gap-2 hover:underline hover:underline-offset-4\"\n            href=\"https://github.com/abdibrokhim/humanaize\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Image\n              aria-hidden\n              className='dark:bg-white'\n              src=\"/github-mark.svg\"\n              alt=\"Github icon\"\n              width={16}\n              height={16}\n            />\n            Open Source →\n          </a>\n        </div>\n      </footer>\n      <script\n        src=\"https://topmate-embed.s3.ap-south-1.amazonaws.com/v1/topmate-embed.js\"\n        user-profile=\"https://topmate.io/embed/profile/abdibrokhim?theme=D5534D\"\n        btn-style='{\"backgroundColor\":\"#fff\",\"color\":\"#000\",\"border\":\"1px solid #000\"}'\n        embed-version=\"v1\"\n        button-text=\"Hey, dear! Let's chat.\"\n        position-right=\"30px\"\n        position-bottom=\"30px\"\n        custom-padding=\"0px\"\n        custom-font-size=\"16px\"\n        custom-font-weight=\"500\"\n        custom-width=\"200px\"\n      ></script>\n    </div>\n  );\n}",
					"snippet": "<b>import React</b>, { useState, useEffect } from 'react';"
				},
				"path": {
					"raw": "src/app/page.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/humanaize"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "import { defineConfig, loadEnv } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ mode }) => {\n  const env = loadEnv(mode, process.cwd(), '');\n  return {\n    define: {\n      'process.env.OPENAI_API_KEY': JSON.stringify(env.OPENAI_API_KEY),\n      'process.env.FALCON_API_KEY': JSON.stringify(env.FALCON_API_KEY),\n      'process.env.API_KEY': JSON.stringify(env.API_KEY),\n      'process.env.AUTH_DOMAIN': JSON.stringify(env.AUTH_DOMAIN),\n      'process.env.PROJECT_ID': JSON.stringify(env.PROJECT_ID),\n      'process.env.STORAGE_BUCKET': JSON.stringify(env.STORAGE_BUCKET),\n      'process.env.MESSAGING_SENDER_ID': JSON.stringify(env.MESSAGING_SENDER_ID),\n      'process.env.APP_ID': JSON.stringify(env.APP_ID),\n      'process.env.MEASUREMENT_ID': JSON.stringify(env.MEASUREMENT_ID),\n    },\n    plugins: [react()],\n  }\n})\n",
					"snippet": ""
				},
				"path": {
					"raw": "vite.config.ts"
				},
				"repo": {
					"raw": "abdibrokhim/monkeytype-ai"
				},
				"total_matches": {
					"raw": 0
				}
			},
			{
				"content": {
					"full": "<b>import React</b> from 'react';\nimport axios from \"axios\";\nimport './App.css';\n\nfunction App() {\n\n  const [loading, setLoading] = React.useState(false);\n  const [input, setInput] = React.useState('');\n\n  const searchImage = () => {\n    setLoading(true);\n    \n    axios.get(`https://lexica.art/api/v1/search?q=${input}`)\n      .then(res => {\n        console.log(res.data);\n        for (let i = 0; i < (res.data['images'].length); i++) {\n\n          let href = document.createElement('a');\n          href.href = '#';\n\n          let image = document.createElement('img');\n          image.src = res.data['images'][i]['srcSmall'];\n          image.alt = 'img';\n          image.id = 'img';\n\n          href.appendChild(image);\n          document.getElementById('search_result').appendChild(href);\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n      .finally(() => {\n        setLoading(false);\n      })\n    }\n\n\n  return (\n    <>\n      <div \n        className=\"App\">\n        <header \n          className=\"App-header\">\n          <p \n            className='title'>Diffuse</p>\n          <p \n            className='subtitle'>The Stable Diffusion search engine</p>\n          <input \n            id=\"search_input\" \n            type=\"text\" \n            autoComplete=\"off\" \n            onChange={(e) => setInput(e.target.value)}\n            placeholder='Search for an image'>\n          </input>\n          <button \n            disabled={loading || input === \"\"}\n            id=\"search\" \n            onClick={() => searchImage()}\n            >\n              Search\n          </button>\n          <a \n            href='https://github.com/abdibrokhim/The-Stable-Diffusion-Search-Engine' \n            className='github_icon' \n            target=\"_blank\" \n            rel=\"noreferrer\">\n            <svg width=\"35px\" height=\"35px\" viewBox=\"0 -0.5 25 25\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m12.301 0h.093c2.242 0 4.34.613 6.137 1.68l-.055-.031c1.871 1.094 3.386 2.609 4.449 4.422l.031.058c1.04 1.769 1.654 3.896 1.654 6.166 0 5.406-3.483 10-8.327 11.658l-.087.026c-.063.02-.135.031-.209.031-.162 0-.312-.054-.433-.144l.002.001c-.128-.115-.208-.281-.208-.466 0-.005 0-.01 0-.014v.001q0-.048.008-1.226t.008-2.154c.007-.075.011-.161.011-.249 0-.792-.323-1.508-.844-2.025.618-.061 1.176-.163 1.718-.305l-.076.017c.573-.16 1.073-.373 1.537-.642l-.031.017c.508-.28.938-.636 1.292-1.058l.006-.007c.372-.476.663-1.036.84-1.645l.009-.035c.209-.683.329-1.468.329-2.281 0-.045 0-.091-.001-.136v.007c0-.022.001-.047.001-.072 0-1.248-.482-2.383-1.269-3.23l.003.003c.168-.44.265-.948.265-1.479 0-.649-.145-1.263-.404-1.814l.011.026c-.115-.022-.246-.035-.381-.035-.334 0-.649.078-.929.216l.012-.005c-.568.21-1.054.448-1.512.726l.038-.022-.609.384c-.922-.264-1.981-.416-3.075-.416s-2.153.152-3.157.436l.081-.02q-.256-.176-.681-.433c-.373-.214-.814-.421-1.272-.595l-.066-.022c-.293-.154-.64-.244-1.009-.244-.124 0-.246.01-.364.03l.013-.002c-.248.524-.393 1.139-.393 1.788 0 .531.097 1.04.275 1.509l-.01-.029c-.785.844-1.266 1.979-1.266 3.227 0 .025 0 .051.001.076v-.004c-.001.039-.001.084-.001.13 0 .809.12 1.591.344 2.327l-.015-.057c.189.643.476 1.202.85 1.693l-.009-.013c.354.435.782.793 1.267 1.062l.022.011c.432.252.933.465 1.46.614l.046.011c.466.125 1.024.227 1.595.284l.046.004c-.431.428-.718 1-.784 1.638l-.001.012c-.207.101-.448.183-.699.236l-.021.004c-.256.051-.549.08-.85.08-.022 0-.044 0-.066 0h.003c-.394-.008-.756-.136-1.055-.348l.006.004c-.371-.259-.671-.595-.881-.986l-.007-.015c-.198-.336-.459-.614-.768-.827l-.009-.006c-.225-.169-.49-.301-.776-.38l-.016-.004-.32-.048c-.023-.002-.05-.003-.077-.003-.14 0-.273.028-.394.077l.007-.003q-.128.072-.08.184c.039.086.087.16.145.225l-.001-.001c.061.072.13.135.205.19l.003.002.112.08c.283.148.516.354.693.603l.004.006c.191.237.359.505.494.792l.01.024.16.368c.135.402.38.738.7.981l.005.004c.3.234.662.402 1.057.478l.016.002c.33.064.714.104 1.106.112h.007c.045.002.097.002.15.002.261 0 .517-.021.767-.062l-.027.004.368-.064q0 .609.008 1.418t.008.873v.014c0 .185-.08.351-.208.466h-.001c-.119.089-.268.143-.431.143-.075 0-.147-.011-.214-.032l.005.001c-4.929-1.689-8.409-6.283-8.409-11.69 0-2.268.612-4.393 1.681-6.219l-.032.058c1.094-1.871 2.609-3.386 4.422-4.449l.058-.031c1.739-1.034 3.835-1.645 6.073-1.645h.098-.005zm-7.64 17.666q.048-.112-.112-.192-.16-.048-.208.032-.048.112.112.192.144.096.208-.032zm.497.545q.112-.08-.032-.256-.16-.144-.256-.048-.112.08.032.256.159.157.256.047zm.48.72q.144-.112 0-.304-.128-.208-.272-.096-.144.08 0 .288t.272.112zm.672.673q.128-.128-.064-.304-.192-.192-.32-.048-.144.128.064.304.192.192.32.044zm.913.4q.048-.176-.208-.256-.24-.064-.304.112t.208.24q.24.097.304-.096zm1.009.08q0-.208-.272-.176-.256 0-.256.176 0 .208.272.176.256.001.256-.175zm.929-.16q-.032-.176-.288-.144-.256.048-.224.24t.288.128.225-.224z\"/></svg>\n          </a>\n          <div \n            id='search_result'></div>\n        </header>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n",
					"snippet": "<b>import React</b> from 'react';"
				},
				"path": {
					"raw": "src/App.js"
				},
				"repo": {
					"raw": "abdibrokhim/The-Stable-Diffusion-Search-Engine"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b> from \"react\";\nimport { classnames } from \"../utils/general\";\nimport { faRocket } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst RunButton = ({ handleCompile, code, processing }) => {\n    return (\n        <button\n            onClick={handleCompile}\n            disabled={!code}\n            className={classnames(\n            \"border-2 border-black z-10 rounded-md shadow-[5px_5px_0px_0px_rgba(0,0,0)] px-4 py-2 hover:shadow transition duration-200 bg-white flex-shrink-0\",\n            !code ? \"opacity-50\" : \"\"\n            )}\n        >\n            {processing ? \"Running... \" : \"Run \"} <FontAwesomeIcon icon={faRocket} />\n      </button>\n    )\n}\n    \nexport default RunButton;",
					"snippet": "<b>import React</b> from \"react\";"
				},
				"path": {
					"raw": "src/app/components/RunButton.jsx"
				},
				"repo": {
					"raw": "abdibrokhim/ai-coding-interviewer"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b>, { useEffect } from 'react';\n\ntype NotificationProps = {\n  message: string;\n  type: 'error' | 'success' | 'info';\n  onClose: () => void;\n};\n\nconst Notification: React.FC<NotificationProps> = ({ message, type, onClose }) => {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onClose();\n    }, 3000); // Auto-close after 3 seconds\n    return () => clearTimeout(timer);\n  }, [onClose]);\n\n  const bgColor = type === 'error' ? 'bg-red-500' : type === 'success' ? 'bg-green-500' : 'bg-blue-500';\n\n  return (\n    <div className={`fixed top-10 left-1/2 transform -translate-x-1/2 ${bgColor} text-white px-4 py-2 rounded-md shadow-lg z-50`}>\n      <p>{message}</p>\n    </div>\n  );\n};\n\nexport default Notification;",
					"snippet": "<b>import React</b>, { useEffect } from 'react';"
				},
				"path": {
					"raw": "src/lib/notify.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/paper-ai-voice-assistant"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "# Building an AI Sticker Maker Platform with AI/ML API, Next.js, React, and Tailwind CSS using OpenAI GPT-4o and DALL·E 3 Models 🎨✨\n\n**I got bored. You too?** 😴\n\nHmm... 🤔\n\nWhat about creating an **AI Sticker Maker** platform? To be honest, it's a really interesting idea. And hey, we might even generate some profit by simply integrating Stripe as a payment provider. 💰 Yeah, why not?\n\nSo, let's get started. Or at least give it a shot! 🚀\n\n## Quick Introduction 🧐\n\nFirst things first, let's sketch out some pseudocode or make a plan (unless you're a true builder who codes from the hip). It should go something like this:\n\n1. **User enters a prompt** (a text description of how the sticker should look).\n2. Our **AI Sticker Maker** will generate a really cutesy sticker. Ta-da! 🥳\n\nEasy-peasy, isn't it? 🍋\n\nBut wait, let me clarify. We're going to use two models: **GPT-4o** and **DALL·E 3**, both from OpenAI. They're hyped, for real! 🔥\n\nWe'll be using the **AI/ML API**, which provides access to 200+ AI models with a single API. Let me briefly tell you about it.\n\n### Meet AI/ML API 🤖🔗\n\nAI/ML API is a game-changing platform for developers and SaaS entrepreneurs looking to integrate cutting-edge AI capabilities into their products. It offers a single point of access to over **200 state-of-the-art AI models**, covering everything from NLP to computer vision.\n\n**Key Features for Developers:**\n\n- **Extensive Model Library**: 200+ pre-trained models for rapid prototyping and deployment. 📚\n- **Customization Options**: Fine-tune models to fit your specific use case. 🎯\n- **Developer-Friendly Integration**: RESTful APIs and SDKs for seamless incorporation into your stack. 🛠️\n- **Serverless Architecture**: Focus on coding, not infrastructure management. ☁️\n\nGet Started for **FREE** ($0 US dollars): [aimlapi.com](https://aimlapi.com/?via=ibrohim) 🆓\n\nDeep Dive into AI/ML API Documentation (very detailed, can't agree more): [docs.aimlapi.com](https://docs.aimlapi.com/?via=ibrohim) 📖\n\n### Tech Stack Ingredients 🥘\n\nWe'll use **TypeScript**, **Next.js**, **React**, and **Tailwind CSS** to build and design our AI Sticker Maker platform.\n\n- **TypeScript** is just a programming language—but a really great one! 📝\n- **Next.js** is the React Framework for the web. It enables us to create high-quality web applications with the power of React components. 🌐\n- **React** is the library for web and native user interfaces. 🖥️\n- **Tailwind CSS** is the best for styling—just build whatever you want, seriously. 🎨\n\nThat was just a quick overview of what we're going to use. Feel free to learn more about each of them here:\n\n- **TypeScript**: [typescriptlang.org](https://www.typescriptlang.org/) 🦕\n- **Next.js**: [nextjs.org](https://nextjs.org/) ⏭️\n- **React**: [react.dev](https://react.dev/) ⚛️\n- **Tailwind CSS**: [tailwindcss.com](https://tailwindcss.com/) 🌬️\n\n## Cooking Has Started 🍳\n\nLet's get our hands dirty! First, create a folder. Open your terminal and enter this:\n\n```bash\nmkdir aiml-tutorial\ncd aiml-tutorial\n```\n\nNow, let's create a new Next.js app:\n\n```bash\nnpx create-next-app@latest\n```\n\nIt will ask you a few questions:\n\n✔ **What is your project named?** Here, you should enter your app name. For example: `aistickermaker`. For the rest of the questions, simply hit `enter`.\n\nHere's what you'll see:\n\n```\n✔ Would you like to use TypeScript? … No / Yes\n✔ Would you like to use ESLint? … No / Yes\n✔ Would you like to use Tailwind CSS? … No / Yes\n✔ Would you like your code inside a `src/` directory? … No / Yes\n✔ Would you like to use App Router? (recommended) … No / Yes\n✔ Would you like to use Turbopack for `next dev`? … No / Yes\n✔ Would you like to customize the import alias (`@/*` by default)? … No / Yes\n```\n\n**Pro Tip**: Feel free to choose `Yes` or `No` based on your preferences. I won't judge! 😜\n\nLet's open the project with VSCode:\n\n```bash\ncode .\n```\n\nNow, Visual Studio Code should launch directly with this app. Time to start coding! 💻\n\n## Implementing APIs 🛠️\n\nFirst things first, let's create APIs for enhancing the user prompt and generating the sticker. Go to the `app` folder, then create a new folder called `api`, and within it, create two new folders: `enhancePrompt` and `generateSticker`. For each, create a `route.ts` file.\n\n### The `enhancePrompt` Endpoint 🧙‍♂️\n\nNow, let's start with the `enhancePrompt` endpoint. Open `route.ts` inside the `enhancePrompt` folder and enter the following code:\n\n```typescript\nimport { NextResponse } from 'next/server';\n\nconst systemPrompt = `\nYou are tasked with enhancing user prompts to generate clear, detailed, and creative descriptions for a sticker creation AI. The final prompt should be imaginative, visually rich, and aligned with the goal of producing a cute, stylized, and highly personalized sticker based on the user's input.\n\nInstructions:\n\nVisual Clarity: The enhanced prompt must provide clear visual details that can be directly interpreted by the image generation model. Break down and elaborate on specific elements of the scene, object, or character based on the user input.\n\nExample: If the user says \"A girl with pink hair,\" elaborate by adding features like \"short wavy pink hair with soft, pastel hues.\"\nStyle & Theme:\n\nEmphasize that the final output should reflect a cute, playful, and approachable style.\nAdd terms like \"adorable,\" \"cartoonish,\" \"sticker-friendly,\" or \"chibi-like\" to guide the output to a lighter, cuter aesthetic.\nInclude styling prompts like “minimalistic lines,” “soft shading,” and “vibrant yet soothing colors.”\nPersonalization:\n\nIf a reference or context is given, enhance it to make the sticker feel personalized.\nAdd context-appropriate descriptors like “wearing a cozy blue hoodie,” “soft pink blush on cheeks,” or “a playful expression.”\nExpression & Pose:\n\nWhere applicable, refine prompts with suggestions about facial expressions or body language. For example, “Smiling softly with big sparkling eyes” or “A cute wink and a slight tilt of the head.”\nBackground & Accessories:\n\nOptionally suggest simple, complementary backgrounds or accessories, depending on user input. For instance, \"A light pastel background with small, floating hearts\" or \"Holding a tiny, sparkling star.\"\nColors:\n\nEmphasize the color scheme based on the user's description, making sure it's consistent with a cute, playful style.\nUse descriptors like “soft pastels,” “bright and cheerful,” or “warm and friendly hues” to set the mood.\nAvoid Overcomplication:\n\nKeep the descriptions short enough to be concise and not overly complex, as the output should retain a sticker-friendly quality.\nAvoid unnecessary details that could clutter the design.\nTone and Language:\n\nThe tone should be light, imaginative, and fun, matching the playful nature of stickers.\n\nExample:\nUser Input:\n\"A girl with pink hair wearing a hoodie.\"\n\nEnhanced Prompt:\n\"An adorable girl with short, wavy pink hair in soft pastel hues, wearing a cozy light blue hoodie. She has a sweet smile with big, sparkling eyes, and a playful expression. The sticker style is cartoonish with minimalistic lines and soft shading. The background is a simple light pastel color with small floating hearts, creating a cute and inviting look.\"\n`;\n\nexport async function POST(request: Request) {\n    try {\n        const { userPrompt } = await request.json();\n        console.log(\"/api/enhancePrompt/route.ts userPrompt: \", userPrompt);\n\n        // Make the API call to the external service\n          const response = await fetch('https://api.aimlapi.com/chat/completions', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${process.env.NEXT_PUBLIC_AIML_API_KEY}`\n            },\n            body: JSON.stringify({\n              model: 'gpt-4o-mini',\n              messages: [\n                {\n                  role: 'system',\n                  content: systemPrompt\n                },\n                {\n                  role: 'user',\n                  content: userPrompt\n                }\n              ]\n            })\n          });\n\n        console.log(\"response: \", response);\n\n        if (!response.ok) {\n            // If the API response isn't successful, return an error response\n            return NextResponse.json({ error: \"Failed to fetch completion data\" }, { status: response.status });\n        }\n\n        const data = await response.json();\n        console.log(\"data: \", data);\n\n        const assistantResponse = data.choices[0]?.message?.content || \"No response available\";\n\n        // Return the assistant's message content\n        return NextResponse.json({ message: assistantResponse });\n    } catch (error) {\n        console.error(\"Error fetching the data:\", error);\n        return NextResponse.json({ error: \"An error occurred while processing your request.\" }, { status: 500 });\n    }\n}\n```\n\n### What's Happening Here? 🤔\n\n- **Importing `NextResponse`**: To handle our HTTP responses smoothly.\n- **Defining the `POST` function**: This is where the magic happens when someone hits this endpoint.\n- **Fetching the `userPrompt`**: We're grabbing the prompt the user provided.\n- **Calling AI/ML API's API**: We're making a request to enhance the user's prompt using GPT-4o.\n- **Handling Responses**: We check if the response is okay, parse the data, and extract the assistant's response.\n- **Error Handling**: Because nobody likes unhandled errors ruining the party.\n\n#### Here's an actual example of how the AI enhances the user's prompt. 🐼🍦🌈\nYou just entered a prompt: \n```text\nA cute panda eating ice cream under a rainbow\n```\n\nThe AI will enhance it to make it more detailed and visually rich. As a result, you should ger a response like: \n```\nAn adorable, chibi-like panda with big, sparkling eyes and a joyful expression, savoring a colorful scoop of ice cream. The panda is fluffy and round, with classic black-and-white markings, sitting contentedly. The ice cream cone features vibrant, swirling flavors in pastel pink, mint green, and sunny yellow. Above, a playful, cartoonish rainbow arcs across a soft blue sky, adding a cheerful splash of color. The design is sticker-friendly with minimalistic lines and soft shading, ensuring a cute and delightful aesthetic perfect for capturing the joyful scene.\n```\n\nAlright, let's dive back into the code cauldron and continue cooking up our AI Sticker Maker! 🍲\n\n## The **`generateSticker`** Endpoint 🖼️\n\nSo, we've got our **`enhancePrompt`** endpoint simmering nicely. Time to spice things up with the **`generateSticker`** endpoint. Head over to the **`api/generateSticker`** folder and open up **`route.ts`**. Replace whatever's in there (probably nothing) with this fresh code:\n\n```typescript\n// api/generateSticker/route.ts\nimport { NextResponse } from 'next/server';\n\nexport async function POST(request: Request) {\n    try {\n        const { userPrompt } = await request.json();\n        console.log(\"/api/generateSticker/route.ts userPrompt: \", userPrompt);\n\n        // Make the API call to the external service\n        const response = await fetch('https://api.aimlapi.com/images/generations', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${process.env.NEXT_PUBLIC_AIML_API_KEY}`\n          },\n          body: JSON.stringify({\n            provider: 'openai',\n            prompt: userPrompt,\n            model: 'dall-e-3',\n            n: 1,\n            quality: 'hd',\n            response_format: 'url',\n            size: '1024x1024',\n            style: 'vivid'\n          })\n        });\n\n        console.log(\"response: \", response);\n\n        if (!response.ok) {\n            // If the API response isn't successful, return an error response\n            return NextResponse.json({ error: \"Failed to fetch completion data\" }, { status: response.status });\n        }\n\n        const data = await response.json();\n        console.log(\"data: \", data);\n\n        const assistantResponse = data.data[0]?.url || \"No response available\";\n\n        console.log(\"assistantResponse: \", assistantResponse);\n\n        // Return the assistant's message content\n        return NextResponse.json({ message: assistantResponse });\n    } catch (error) {\n        console.error(\"Error fetching the data:\", error);\n        return NextResponse.json({ error: \"An error occurred while processing your request.\" }, { status: 500 });\n    }\n}\n```\n\n### What's Happening Here? 🤔\n\n- **Importing `NextResponse`**: To handle our HTTP responses smoothly.\n- **Defining the `POST` function**: This is where the magic happens when someone hits this endpoint.\n- **Fetching the `userPrompt`**: We're grabbing the prompt the user provided.\n- **Calling AI/ML API's API**: We're making a request to generate an image based on the prompt using DALL·E 3. \n- **Handling Responses**: We check if the response is okay, parse the data, and extract the image URL.\n- **Error Handling**: Because nobody likes unhandled errors ruining the party.\n\nLet's try above prompt with `panda` in action! 🚀\n\n#### Here's our cutesy panda sticker! 🐼🍦🌈\n\n![Cute Panda Eating Ice Cream Under a Rainbow](./public/generated_stickers/img-NdDGjDeEqR6LevFVwCf4U1t1.png)\n\nOther examples 😍\n\nPrompt: \n```text\nA girl with short white+grey hair wearing a oversize shirt\n```\n\n![A girl with short white+grey hair wearing a oversize shirt](./public/generated_stickers/img-gbDUBHcHIwK2gVyEwiOXhvvi.png)\n\n\nPrompt: \n```\nA girl with short black+pink hair wearing a oversize pink shirt\n```\n\n![A girl with short black+pink hair wearing a oversize pink shirt](./public/generated_stickers/img-lo0k25GLYpcYz4f4aXsm73MS.png)\n\nSeems, like really WOW! 🤩\n\nWe need a frontend, GUYS! 😅\n\n## Building the Frontend 🎨\n\nTime to put a face on our app! Let's create a user interface where users can input their prompt and get a shiny new sticker.\n\n### The **`page.tsx`** File 📄\n\nNavigate to **`app/page.tsx`** and update it with the following code:\n\n```typescript\n// app/page.tsx\n'use client';\n\nimport Image from \"next/image\";\nimport { useState } from 'react';\nimport { faArrowUp, faDownload, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Notification from './utils/notify';\nimport { Analytics } from \"@vercel/analytics/react\"\n\nexport default function Home() {\n  const [notification, setNotification] = useState<{ message: string; type: 'error' | 'success' | 'info' } | null>(null);  // notification message\n  const [loading, setLoading] = useState(false);\n  const [prompt, setPrompt] = useState('');\n  const [stickerUrl, setStickerUrl] = useState(\"\");\n\n  const loader = () => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\">\n    <circle cx={4} cy={12} r={3} fill=\"currentColor\">\n        <animate id=\"svgSpinners3DotsScale0\" attributeName=\"r\" begin=\"0;svgSpinners3DotsScale1.end-0.25s\" dur=\"0.75s\" values=\"3;.2;3\" />\n    </circle>\n    <circle cx={12} cy={12} r={3} fill=\"currentColor\">\n        <animate attributeName=\"r\" begin=\"svgSpinners3DotsScale0.end-0.6s\" dur=\"0.75s\" values=\"3;.2;3\" />\n    </circle>\n    <circle cx={20} cy={12} r={3} fill=\"currentColor\">\n        <animate id=\"svgSpinners3DotsScale1\" attributeName=\"r\" begin=\"svgSpinners3DotsScale0.end-0.45s\" dur=\"0.75s\" values=\"3;.2;3\" />\n    </circle>\n    </svg>\n  );\n\n  const enhanceUserPrompt = async (prompt: string) => {\n    setNotification({ message: 'Enhancing user prompt...', type: 'info' });\n\n    // Make the API call to the /api/enhancePrompt route and return the enhanced prompt\n    const response = await fetch('/api/enhancePrompt', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ userPrompt: prompt }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch completion data');\n    }\n\n    const data = await response.json();\n    return data.message;\n  };\n\n  const generateCuteSticker = async (prompt: string) => {\n    setNotification({ message: 'Generating cute sticker...', type: 'info' });\n\n    // Make the API call to the /api/generateSticker route and return the generated sticker URL\n    const response = await fetch('/api/generateSticker', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ userPrompt: prompt }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch completion data');\n    }\n\n    const data = await response.json();\n    return data.message;\n  };\n\n    const generateSticker = async () => {\n        if (!prompt) return;\n\n        setLoading(true);\n        setNotification({ message: 'Processing request...', type: 'info' });\n\n        try {\n          // Enhance user prompt\n          const enhancedPrompt = await enhanceUserPrompt(prompt);\n\n          if (!enhancedPrompt) {\n            setNotification({ message: 'Failed to enhance user prompt.', type: 'error' });\n            return;\n          }\n\n          // Generate cute sticker\n          const sticker = await generateCuteSticker(enhancedPrompt); \n\n          if (!sticker) {\n            setNotification({ message: 'Failed to generate cute sticker.', type: 'error' });\n            return;\n          }\n\n          setStickerUrl(sticker);\n          console.log('Sticker URL:', sticker);\n          setNotification({ message: 'Cute sticker generated successfully!', type: 'success' });\n\n        } catch (error) {\n          console.error('An unexpected error occurred:', error);\n          setNotification({ message: 'An unexpected error occurred.', type: 'error' });\n        } finally {\n          setLoading(false);\n        }\n    };\n\n    const handleDownload = () => {\n      if (!stickerUrl) return;\n  \n      const link = document.createElement('a');\n      link.href = stickerUrl;\n      link.download = 'cute-sticker.png'; // You can set a default filename\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    };\n  \n    const handleClose = () => {\n      setStickerUrl(\"\");\n      setPrompt(\"\");\n    };\n\n    return (\n        <div className=\"flex flex-col items-center justify-center min-h-screen text-white p-4 bg-[#212121e6]\">\n            <Analytics />\n            {notification && (\n                <Notification\n                    message={notification.message}\n                    type={notification.type}\n                    onClose={() => setNotification(null)}\n                />\n            )}\n            <div className=\"mb-6 inline-flex justify-center text-2xl font-semibold leading-9\">\n                <h1>Let's Generate Cutesy AI Sticker!</h1>\n            </div>\n            <div className=\"lg:w-[60%] w-full mx-auto flex items-center p-2 mb-8 shadow-lg gap-4 bg-[#2e2e2e] rounded-full\">\n                <input\n                    type=\"text\"\n                    value={prompt}\n                    onChange={(e) => setPrompt(e.target.value)}\n                    placeholder=\"A girl with short pink hair wearing a oversize hoodie...\"\n                    className=\"placeholder:text-[#aeaeae] bg-transparent focus:outline-none text-white outline-none w-full px-4\" \n                    disabled={loading}\n                />\n                <button\n                    disabled={prompt === '' || loading}\n                    onClick={generateSticker}\n                    className={`flex items-center justify-center w-12 h-10 rounded-full shadow ${\n                      prompt === '' ? 'cursor-not-allowed bg-[#4e4e4e] text-black' : 'cursor-pointer bg-[#eeeeee] text-black'}`}\n                    >\n                    {!loading \n                        ? <FontAwesomeIcon icon={faArrowUp} />\n                        : <span className='flex justify-center items-center text-black text-xl'>{loader()}</span>\n                    }\n                </button>\n            </div>\n            {/* Modal */}\n            {stickerUrl && (\n              <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n                <div className=\"bg-[#2e2e2e] rounded-md p-4 relative w-11/12 max-w-md\">\n                  {/* Download Button */}\n                  <button\n                    onClick={handleDownload}\n                    className=\"absolute top-4 right-4 flex items-center justify-center w-8 h-8 bg-[#4e4e4e] rounded-full hover:bg-[#5e5e5e] transition\"\n                    title=\"Download\"\n                  >\n                    <FontAwesomeIcon icon={faDownload} className=\"text-white\" />\n                  </button>\n                  {/* Close Button */}\n                  <button\n                    onClick={handleClose}\n                    className=\"absolute top-4 left-4 flex items-center justify-center w-8 h-8 bg-[#4e4e4e] rounded-full hover:bg-[#5e5e5e] transition\"\n                    title=\"Close\"\n                  >\n                    <FontAwesomeIcon icon={faTimes} className=\"text-white\" />\n                  </button>\n                  {/* Sticker Image */}\n                  <div className=\"flex justify-center items-center\">\n                    <Image \n                      src={stickerUrl} \n                      alt=\"Generated Sticker\" \n                      width={300} \n                      height={300} \n                      className=\"rounded-md\" \n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n        </div>\n    );\n}\n```\n\n### Breaking It Down 🧩\n\n\n* **Loader**: We are using really simple, but nice loader; `three horizontal dots with some nice animaton`:\n\n```typescript\n  const loader = () => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\">\n    <circle cx={4} cy={12} r={3} fill=\"currentColor\">\n        <animate id=\"svgSpinners3DotsScale0\" attributeName=\"r\" begin=\"0;svgSpinners3DotsScale1.end-0.25s\" dur=\"0.75s\" values=\"3;.2;3\" />\n    </circle>\n    <circle cx={12} cy={12} r={3} fill=\"currentColor\">\n        <animate attributeName=\"r\" begin=\"svgSpinners3DotsScale0.end-0.6s\" dur=\"0.75s\" values=\"3;.2;3\" />\n    </circle>\n    <circle cx={20} cy={12} r={3} fill=\"currentColor\">\n        <animate id=\"svgSpinners3DotsScale1\" attributeName=\"r\" begin=\"svgSpinners3DotsScale0.end-0.45s\" dur=\"0.75s\" values=\"3;.2;3\" />\n    </circle>\n    </svg>\n  );\n```\n\n\n- **State Management**: Using `useState` to handle notifications, loading state, the user's prompt, and the sticker URL.\n- **Functions**:\n  - **`enhanceUserPrompt`**: Calls our **`/api/enhancePrompt`** endpoint to make the user's prompt more... well, *prompting*.\n  - **`generateCuteSticker`**: Hits the **`/api/generateSticker`** endpoint to get that adorable sticker.\n  - **`generateSticker`**: Orchestrates the whole process when the user clicks the magic button.\n  - **`handleDownload`**: Allows the user to download their new sticker.\n  - **`handleClose`**: Closes the sticker modal.\n- **UI Components**:\n  - **Input Field**: Where the user types their wildest sticker dreams.\n  - **Generate Button**: Triggers the sticker generation.\n  - **Modal**: Displays the sticker with options to download or close.\n  - **Notifications**: Pops up messages to inform the user what's going on.\n\n### A Sprinkle of FontAwesome 🌟\n\nWe're using FontAwesome for icons. Make sure to install it:\n\n```bash\nnpm i --save @fortawesome/fontawesome-svg-core\nnpm i --save @fortawesome/free-solid-svg-icons\nnpm i --save @fortawesome/free-regular-svg-icons\nnpm i --save @fortawesome/free-brands-svg-icons\nnpm i --save @fortawesome/react-fontawesome@latest\n```\n\nYou may also check the [FontAwesome documentation](https://docs.fontawesome.com/web/use-with/react) for more details. Or search for other icons [Search icons](https://fontawesome.com/search).\n\n### Handling Notifications 🔔\n\nRemember that notification component we imported? Let's create it.\n\n## Creating the Notification Component 📢\n\nCreate a new folder called **`utils`** inside your **`app`** directory. Inside **`utils`**, create a file called **`notify.tsx`** and paste:\n\n```typescript\n// app/utils/notify.tsx\n<b>import React</b>, { useEffect } from 'react';\n\ntype NotificationProps = {\n  message: string;\n  type: 'error' | 'success' | 'info';\n  onClose: () => void;\n};\n\nconst Notification: React.FC<NotificationProps> = ({ message, type, onClose }) => {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onClose();\n    }, 3000); // Auto-close after 3 seconds\n    return () => clearTimeout(timer);\n  }, [onClose]);\n\n  const bgColor = type === 'error' ? 'bg-red-500' : type === 'success' ? 'bg-green-500' : 'bg-blue-500';\n\n  return (\n    <div className={`fixed top-10 left-1/2 transform -translate-x-1/2 ${bgColor} text-white px-4 py-2 rounded-md shadow-lg z-50`}>\n      <p>{message}</p>\n    </div>\n  );\n};\n\nexport default Notification;\n```\n\n### What's This For? 🎈\n\n- **Purpose**: To display temporary messages to the user, like \"Generating cute sticker...\" or \"An error occurred.\"\n- **Auto-Close Feature**: It disappears after 3 seconds, just like my motivation on Monday mornings.\n- **Styling**: Changes color based on the type of notification.\n\n## Configuring Image Domains 🖼️\n\nSince we're fetching images from OpenAI's servers, Next.js needs to know it's okay to load them. Open up **`next.config.ts`** and add:\n\n```typescript\n// next.config.ts\nimport type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'oaidalleapiprodscus.blob.core.windows.net',\n        port: '',\n      },\n    ],\n  },\n};\n\nexport default nextConfig;\n```\n\n### Why Do This? 🤷‍♂️\n\nBecause Next.js is a bit overprotective (like a helicopter parent) and won't load images from external domains unless you specifically allow it. This setting tells Next.js, \"It's cool, these images are with me.\"\n\n## Environment Variables 🔑\n\nNow, before you excitedly run your app and wonder why it's not working, let's set up our environment variables.\n\n### Setting Up Your AI/ML API Key 🗝️\n\nCreate a file called **`.env.local`** in the root of your project and add:\n\n```\nNEXT_PUBLIC_AIML_API_KEY=your_api_key_here\n```\n\nReplace **`your_api_key_here`** with your actual AI/ML API key. If you don't have one, you might need to sign up at [AI/ML API](https://aimlapi.com/?via=ibrohim) and grab it. It's absolutely **FREE** to get started!\n\nHere's a Quick Tutorial on how to get your API key: [How to get API Key from AI/ML API. Quick step-by-step tutorial with screenshots for better understanding.](https://medium.com/@abdibrokhim/how-to-get-api-key-from-ai-ml-api-225a69d0bb25)\n\n> **Warning**: Keep this key secret! Don't share it publicly or commit it to Git. Treat it like your Netflix password.\n\n## Fire It Up! 🚀\n\nTime to see this baby in action.\n\n### Running the Development Server 🏃‍♀️\n\nIn your terminal, run:\n\n```bash\nnpm run dev\n```\n\nThis starts the development server. Open your browser and navigate to **`http://localhost:3000`**.\n\nYou should see your AI Sticker Maker platform. 🌟\n\n![AI Sticker Maker](./app_images/main_view.png)\n\n### Testing It Out 🧪\n\n- **Enter a Prompt**: Something like *\"A girl with short white+grey hair wearing a oversize shirt\"*. Go wild!\n![Generated Sticker](./app_images/input.png)\n\n- **Click the Button**: Hit that generate button and watch the magic unfold.\n- **Wait for It...**: You'll see notifications keeping you posted.\n- **Voilà!**: Your AI-generated sticker should appear. Bask in its glory.\n\n![Generated Sticker](./app_images/gen_sticker.png)\n\n## Troubleshooting 🛠️\n\n- **\"Failed to fetch completion data\"**: Double-check your API key and make sure it's set correctly.\n- **Images Not Loading**: Ensure your **`next.config.ts`** file is set up as shown above.\n- **App Crashes**: Open your console and see what errors pop up. Google is your friend!\n\n## Wrapping Up 🎁\n\nCongratulations! You've just built an AI Sticker Maker that's both fun and functional. Not only did you delve into the world of AI and Next.js, but you also made something that can bring a smile to people's faces.\n\n### What's Next? 🚧\n\n- **Styling**: Customize the look and feel. Make it as fabulous or minimalist as you like.\n- **Features**: Add user accounts, sticker galleries, or even a feature to create sticker packs.\n- **Monetization**: Integrate Stripe and start charging for premium stickers. Time to make some moolah!\n\n## Final Thoughts 💭\n\nBuilding this app was like making a sandwich with layers of tech goodness. We've got AI models as the filling, Next.js as the bread, and a sprinkle of humor as the secret sauce.\n\nRemember, the world is your oyster (or sticker). Keep experimenting, keep building, and most importantly, have fun!\n\nHappy coding! 🎉\n\nFull implementation available on Github [AI Sticker Maker](https://github.com/abdibrokhim/ai-sticker-maker).\n\nIt’s Absolutely FREE to get started! [Try It Now click](https://aimlapi.com/?via=ibrohim)\n\nAlso check out this tutorial, it's very interesting! [Building a Chrome Extension from Scratch with AI/ML API, Deepgram Aura, and IndexedDB Integration](https://medium.com/@abdibrokhim/building-a-chrome-extension-from-scratch-with-ai-ml-api-deepgram-aura-and-indexeddb-integration-2e5d1e6fbfb0)\n\nShould you have any questions or need further assistance, don’t hesitate to reach out via email at `abdibrokhim@gmail.com`.",
					"snippet": "<b>import React</b>, { useEffect } from 'react';"
				},
				"path": {
					"raw": "TUTORIAL.md"
				},
				"repo": {
					"raw": "abdibrokhim/ai-sticker-maker"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b>, { useEffect, useState, useRef } from 'react';\nimport { firebaseConfig } from './firebaseConfig';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDiscord, faGithub, faGoogle, faLinkedin } from '@fortawesome/free-brands-svg-icons';\nimport { faArrowsRotate, faCircleDollarToSlot, faEnvelope } from '@fortawesome/free-solid-svg-icons';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signOut } from 'firebase/auth';\nimport { User } from 'firebase/auth';\nimport Notification from './notify';\nimport { GuessedCard } from './types';\nimport { getFirestore, collection, getDocs, setDoc, doc, deleteDoc, updateDoc, getDoc } from 'firebase/firestore';\nimport getStripe from './api/utils/get-stripe';\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst provider = new GoogleAuthProvider();\nconst firestore = getFirestore(app);\n\nexport default function Header() {\n    const [user, setUser] = useState<User | null>(null);\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n    const [showLoginCard, setShowLoginCard] = useState(false);\n    const [showProfile, setShowProfile] = useState(false);\n    const dropdownRef = useRef<HTMLDivElement | null>(null);\n    const loginCardRef = useRef<HTMLDivElement | null>(null); // Reference for login card\n    const profileCardRef = useRef<HTMLDivElement | null>(null); // Reference for login card\n    const [points, setPoints] = useState<number>(0);\n    const [notification, setNotification] = useState<{ message: string; type: 'error' | 'success' |'info' } | null>(null);  // notification message\n    const [needSubscription, setNeedSubscription] = useState<boolean>(true);\n\n    // if user is not logged in, show login card every 2 minutes\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (!user) {\n                setShowLoginCard(true);\n            }\n        }, 60000);\n        return () => clearInterval(interval);\n    }, [user]);\n\n    // show notification\n    const triggerNotification = (nMessage: string, nType: 'error' | 'success' | 'info') => {\n        setNotification({ message: nMessage, type: nType });\n    };\n\n    const fetchGuessedCards = async () => {\n        if (!user || !user.email) {\n            console.error(\"User is not logged in or email is missing\");\n            triggerNotification(\"User not authenticated\", \"error\");\n            return;\n        }\n        const userEmail = user.email;\n        const querySnapshot = await getDocs(collection(firestore, 'guessedCards', userEmail, 'cards'));\n        const cards: GuessedCard[] = [];\n        querySnapshot.forEach((doc) => {\n            const data = doc.data();\n            const gCard: GuessedCard = {\n            id: data.id,\n            imageUrl: data.imageUrl,\n            prompt: data.prompt,\n            guess: data.guess,\n            grade: data.grade,\n            point: data.point,\n            createdAt: data.createdAt,\n            };\n            cards.push(gCard);\n        });\n        console.log(\"guessed cards: \", cards);\n        // calculate total points\n        const totalPoints = cards.reduce((acc, card) => acc + card.point, 0);\n        setPoints(totalPoints);\n        console.log(\"total points: \", totalPoints);\n    };\n\n    // get guessed cards from firebase database\n    useEffect(() => {\n        console.log(\"fetching guessed cards...\");\n        console.log(\"user: \", user);\n        console.log(\"user email: \", user?.email);\n        fetchGuessedCards();\n    }, [user]);\n\n    useEffect(() => {\n        const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n            setUser(currentUser);\n        });\n\n        return () => unsubscribe();\n    }, [user]);\n\n    const getCurrentUser = () => {\n        return new Promise((resolve, reject) => {\n            const unsubscribe = onAuthStateChanged(auth, (user) => {\n                resolve(user);\n                unsubscribe();\n            }, reject);\n        });\n    };\n\n    const handleLogout = () => {\n        signOut(auth);\n        setDropdownOpen(false); // Close the dropdown on logout\n    };\n\n    const toggleDropdown = () => {\n        setDropdownOpen(!dropdownOpen);\n    };\n\n    // Close the dropdown if clicked outside\n    useEffect(() => {\n        const handleClickOutside = (event: any) => {\n            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n                setDropdownOpen(false);\n            }\n            if (loginCardRef.current && !loginCardRef.current.contains(event.target as Node)) {\n                setShowLoginCard(false);\n            }\n            if (profileCardRef.current && !profileCardRef.current.contains(event.target as Node)) {\n                setShowProfile(false);\n            }\n        };\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, []);\n\n    const handleStripe = async () => {\n        const checkoutSession = await fetch('/api/checkout_sessions', {\n            method: 'POST',\n            headers: { origin: 'http://localhost:3000' },\n        })\n        const checkoutSessionJson = await checkoutSession.json()\n      \n        const stripe = await getStripe()\n        const {error} = await stripe.redirectToCheckout({\n            sessionId: checkoutSessionJson.id,\n        })\n      \n        if (error) {\n          console.warn(error.message)\n        }\n    };\n\n    // fetch user subscription from firebase collection=subscriptions where email=user.email. save to state subscribeed\n    const fetchUserSubscription = async () => {\n        // const currentUser = await getCurrentUser();\n\n      if (!user || !user.email) {\n        console.error(\"User is not logged in or email is missing\");\n        triggerNotification(\"User not authenticated\", \"error\");\n        return;\n      }\n    \n      const userEmail = user.email;\n      const docRef = doc(firestore, 'subscriptions', userEmail);\n    \n      try {\n        const docSnap = await getDoc(docRef);\n    \n        if (docSnap.exists()) {\n            setNeedSubscription(false);\n        } else {\n            setNeedSubscription(true);\n        }\n      } catch (error) {\n        console.error(\"Error fetching user subscription: \", error);\n        triggerNotification(\"Error fetching subscription status\", \"error\");\n      }\n    };\n\n    // get user subscription from firebase database\n    useEffect(() => {\n        console.log(\"fetching user subscription...\");\n        console.log(\"user: \", user);\n        console.log(\"user email: \", user?.email);\n        fetchUserSubscription();\n    }, [user]);\n\n    // login component\n    const Login = () => {\n        const handleGoogleLogin = async () => {\n            try {\n                await signInWithPopup(auth, provider);\n                setShowLoginCard(false); // Close the login card after successful login\n            } catch (error) {\n                console.error('Error signing in with Google: ', error);\n            }\n        };\n    \n        return (\n            <div className=\"flex flex-row gap-4 flex-wrap justify-center m-auto\" ref={loginCardRef}>\n                <button\n                    onClick={handleGoogleLogin}\n                    className=\"cursor-pointer hover:underline border border-white rounded-md px-4 py-4 flex items-center gap-2\"\n                >\n                    <FontAwesomeIcon icon={faGoogle} />\n                    Sign in with Google\n                </button>\n            </div>\n        );\n    };\n\n    // profile component\n    const Profile = () => {\n        return (\n            <div className=\"flex flex-col gap-4 justify-center m-auto p-4\" ref={profileCardRef}>\n                <div className=\"flex flex-row gap-4\">\n                        <div className=\"flex-shrink-0\">\n                            <img\n                                className=\"h-12 w-12 rounded-full\"\n                                src={user?.photoURL || 'https://via.placeholder.com/150'}\n                                alt={user?.displayName!}\n                            />\n                        </div>\n                        <div>\n                            <h1 className=\"text-lg font-bold\">{user?.displayName}</h1>\n                            <p className=\"text-sm text-gray-400\">{user?.email}</p>\n                        </div>\n                </div>\n                <div className=\"w-full lg:max-w-5xl flex items-center justify-between p-2 shadow-lg gap-4 bg-[#2e2e2e] rounded-md\">\n                    <p className='text-xs text-[#aaaaaa]'>Points recieved: <span className='text-sm text-white font-bold'>{points}</span></p>\n                    <button\n                        onClick={() => {\n                            triggerNotification('Refreshing points...', 'info');\n                            fetchGuessedCards();\n                        }}\n                        className={`flex items-center justify-center w-6 h-6 rounded-full shadow cursor-pointer bg-[#eeeeee] hover:bg-[#aaaaaa] text-black`}\n                        >\n                        <FontAwesomeIcon icon={faArrowsRotate} />\n                    </button>\n                </div>\n                {needSubscription ? (\n                    <div className='text-sm text-[#aaaaaa]'>\n                        <button \n                            className='text-md text-white font-bold underline'\n                            onClick={\n                                () => {\n                                    handleStripe();\n                                }}\n                                >SUBSCRIBE\n                        </button>\n                        <span> to get <span className='text-md text-white font-bold italic'>100</span> generations for a month.</span>\n                    </div>\n                    ) : (\n                        <p className='text-sm text-[#aaaaaa]'>Your current plan <span className='text-md text-white font-bold'>USD $10/month</span></p>\n                    )\n                }\n            </div>\n        )\n    };\n\n    return (\n        <header className=\"flex flex-col gap-4 justify-between items-end p-4 text-white absolute top-4 right-2\">\n            {/* show notification */}\n            {notification && (\n                <Notification\n                message={notification.message}\n                type={notification.type}\n                onClose={() => setNotification(null)}\n                />\n            )}\n            {/* show login card as a modal */}\n            {showLoginCard && (\n                <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\">\n                    <div className=\"bg-[#2e2e2e] rounded-lg shadow-lg max-w-[800px] max-h-[600px] p-2\">\n                        <Login />\n                    </div>\n                </div>\n            )}\n            {/* show profile card as a modal */}\n            {showProfile && (\n                <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\">\n                    <div className=\"bg-[#2e2e2e] rounded-lg shadow-lg max-w-[800px] max-h-[600px] p-2\">\n                        <Profile />\n                    </div>\n                </div>\n            )}\n            <div>\n                {user ? (\n                    <div className=\"relative\" ref={dropdownRef}>\n                        <span\n                            onClick={toggleDropdown}\n                            className=\"cursor-pointer hover:underline border border-white rounded-md px-4 py-4\"\n                        >\n                            {user.email}\n                        </span>\n                        {dropdownOpen && (\n                            <div className='absolute right-0 mt-6 gap-4 bg-[#2e2e2e] rounded-lg shadow-lg p-2'>\n                                <div className=\"rounded-md shadow-lg z-10\">\n                                    <button\n                                        onClick={() => setShowProfile(true)}\n                                        className=\"block w-full text-white text-center px-4 py-2 hover:bg-[#aaaaaa] hover:text-black rounded-md\"\n                                    >\n                                        Profile\n                                    </button>\n                                </div>\n                                <div className=\"rounded-md shadow-lg z-10\">\n                                    <button\n                                        onClick={handleLogout}\n                                        className=\"block w-full text-white text-center px-4 py-2 hover:bg-[#aaaaaa] hover:text-black rounded-md\"\n                                    >\n                                        Logout\n                                    </button>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                ) : (\n                    <button\n                        onClick={() => setShowLoginCard(true)}\n                        className=\"block w-full bg-[#eeeeee] text-black text-center px-4 py-2 hover:bg-[#aaaaaa] rounded-md\"\n                    >\n                        Login\n                    </button>\n                )}\n            </div>\n        <div className=\"flex flex-col gap-2 items-end justify-start mt-[200px]\">\n          <a href=\"mailto:abdibrokhim@gmail.com\" className={`textButton flex items-center justify-start lg:justify-start my-1 transition text-gray-400 text-sm hover:text-white hover:underline hover:font-bold\n          `}\n            target=\"_blank\" rel=\"noreferrer noopener\">\n            <i className=\"fas fa-fw fa-envelope mr-2\"></i>\n            <div className=\"text\"><FontAwesomeIcon icon={faEnvelope} className='mr-2' /> contact</div>\n          </a>\n          <a href=\"https://buymeacoffee.com/abdibrokhim/\" className={`textButton flex items-center justify-start lg:justify-start my-1 transition text-gray-400 text-sm hover:text-white hover:underline hover:font-bold\n            `} target=\"_blank\" rel=\"noreferrer noopener\">\n            <i className=\"fas fa-fw fa-donate mr-2\"></i>\n            <div className=\"text\"><FontAwesomeIcon icon={faCircleDollarToSlot} className='mr-2' /> support</div>\n          </a>\n          <a href=\"https://github.com/abdibrokhim/AI-Magic-FlashCards-with-Stripe\" className={`textButton flex items-center justify-start lg:justify-start my-1 transition text-gray-400 text-sm hover:text-white hover:underline hover:font-bold\n            `} target=\"_blank\" rel=\"noreferrer noopener\">\n            <i className=\"fas fa-fw fa-code mr-2\"></i>\n            <div className=\"text\"><FontAwesomeIcon icon={faGithub} className='mr-2' /> github</div>\n          </a>\n          <a href=\"https://discord.gg/nVtmDUN2sR\" className={`textButton flex items-center justify-start lg:justify-start my-1 transition text-gray-400 text-sm hover:text-white hover:underline hover:font-bold\n            `} target=\"_blank\" rel=\"noreferrer noopener\">\n            <i className=\"fab fa-fw fa-discord mr-2\"></i>\n            <div className=\"text\"><FontAwesomeIcon icon={faDiscord} className='mr-2' /> discord</div>\n          </a>\n          <a href=\"https://linkedin.com/in/abdibrokhim\" className={`textButton flex items-center justify-start lg:justify-start my-1 transition text-gray-400 text-sm hover:text-white hover:underline hover:font-bold\n            `} target=\"_blank\" rel=\"noreferrer noopener\">\n            <i className=\"fab fa-fw fa-linkedin mr-2\"></i>\n            <div className=\"text\"><FontAwesomeIcon icon={faLinkedin} className='mr-2' /> linkedin</div>\n          </a>\n        </div>\n        </header>\n    );\n}",
					"snippet": "<b>import React</b>, { useEffect, useState, useRef } from 'react';"
				},
				"path": {
					"raw": "src/app/header.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/AI-Magic-FlashCards-with-Stripe"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b> from 'react';\n<b>import React</b>DOM from 'react-dom/client';\nimport './index.css';\nimport './dist/styles.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n",
					"snippet": "<b>import React</b> from 'react';\n<b>import React</b>DOM from 'react-dom/client';"
				},
				"path": {
					"raw": "src/index.js"
				},
				"repo": {
					"raw": "abdibrokhim/Custom-AI-Assistant"
				},
				"total_matches": {
					"raw": 2
				}
			},
			{
				"content": {
					"full": "'use client'\n\n// File: /app/page.tsx\n\n<b>import React</b>, { useState } from \"react\";\n\nexport default function Home() {\n  const [nameOne, setNameOne] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleNameOne = async () => {};\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center p-4 bg-gray-100\">\n      <main className=\"w-full max-w-4xl bg-white p-8 rounded-lg shadow-md\">\n        <h1 className=\"text-3xl font-bold mb-6 text-center\">Harmony Quest Evaluator & Sound Generator</h1>\n        <div className=\"flex flex-col lg:flex-row md:justify-center md:items-center justify-start items-start gap-2 mt-16\">\n                <input\n                  type=\"email\"\n                  placeholder=\"Enter your name (e.g., AI Dungeon)\"\n                  value={nameOne}\n                  onChange={(e) => setNameOne(e.target.value)}\n                  className=\"border border-gray-300 rounded-md p-2 w-full max-w-sm outline-none border border-[#1e1e1e] rounded-md p-2 w-full max-w-sm shadow-[0_4px_6px_-1px_rgba(30,30,30,0.1),0_2px_4px_-1px_rgba(30,30,30,0.06)] focus:outline-none focus:ring-2 focus:ring-[#1e1e1e]\"\n                />\n                <button\n                  onClick={handleNameOne}\n                  disabled={loading}\n                  className=\"cta-top flex gap-2 items-center justify-center rounded-md hover:opacity-80 active:opacity-60 active:scale-95 transition-all text-white text-[16px] px-6 h-[40px] shrink-0 grow-0 btn hover:opacity-80 !bg-[#1e1e1e] !text-white !bg-none !text-[18px] px-6 !h-[44px]\"\n                >\n                  {loading ? 'Loading...' : (\n                    <>\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" aria-hidden=\"true\" role=\"img\" className=\"-ml-2 shrink-0 iconify iconify--fluent\" width=\"20\" height=\"20\" viewBox=\"0 0 28 28\">\n                        <path fill=\"currentColor\" d=\"M10.06 18.701a1.628 1.628 0 0 0 2.43-.676l.77-2.34a3.823 3.823 0 0 1 2.416-2.418l2.238-.727a1.61 1.61 0 0 0 .786-.595a1.62 1.62 0 0 0-.849-2.489l-2.215-.72a3.82 3.82 0 0 1-2.42-2.414l-.727-2.237a1.622 1.622 0 0 0-.594-.785a1.655 1.655 0 0 0-1.879 0a1.627 1.627 0 0 0-.6.8L8.68 6.365a3.817 3.817 0 0 1-2.359 2.37l-2.24.726a1.626 1.626 0 0 0 .02 3.073l2.216.72a3.856 3.856 0 0 1 1.816 1.286c.266.343.471.728.606 1.14l.728 2.234c.112.318.32.593.595.787m9.744 6.08a1.2 1.2 0 0 0 .696.22a1.2 1.2 0 0 0 .692-.217a1.21 1.21 0 0 0 .446-.6l.372-1.143a1.609 1.609 0 0 1 1.017-1.02l1.166-.378A1.213 1.213 0 0 0 25 20.505a1.2 1.2 0 0 0-.844-1.146l-1.144-.37a1.609 1.609 0 0 1-1.02-1.018l-.38-1.163a1.2 1.2 0 0 0-2.274.016l-.374 1.146a1.61 1.61 0 0 1-.993 1.017l-1.166.378a1.213 1.213 0 0 0-.807 1.139a1.2 1.2 0 0 0 .823 1.138l1.144.372a1.606 1.606 0 0 1 1.02 1.023l.379 1.163a1.2 1.2 0 0 0 .44.582\"></path>\n                      </svg>\n                      <p className=\"whitespace-nowrap\">Join</p>\n                    </>\n                  )}\n                </button>\n              </div>\n      </main>\n    </div>\n  );\n}\n",
					"snippet": "<b>import React</b>, { useState } from \"react\";"
				},
				"path": {
					"raw": "src/app/components/firstPage.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/aiio"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b>, { useState } from 'react';\n<b>import React</b>Player from 'react-player';\n\nconst CustomReactPlayer = ({ url, timeStamp }) => {\n\n    const [playing, setPlaying] = useState(false);\n    const playerRef = React.useRef(null);\n    // const [timestamp, setTimestamp] = useState(0.00);\n\n    // setTimestamp(timeStamp);\n\n    React.useEffect(() => {\n        playerRef.current.seekTo(timeStamp);\n    }, [timeStamp]);\n    \n    return (\n        <ReactPlayer\n            // url={url+\"&t=\"+timeStamp+\"s\"}\n            url={url}\n            playing={playing}\n            controls={true}\n            width=\"100%\"\n            height=\"100%\"\n            onPlay={() => setPlaying(true)}\n            onPause={() => setPlaying(false)}\n            ref={playerRef}\n        />\n    );\n};\n\nexport default CustomReactPlayer;\n",
					"snippet": "<b>import React</b>, { useState } from 'react';\n<b>import React</b>Player from 'react-player';"
				},
				"path": {
					"raw": "frontend/src/components/CustomReactPlayer.js"
				},
				"repo": {
					"raw": "abdibrokhim/Lychee"
				},
				"total_matches": {
					"raw": 2
				}
			},
			{
				"content": {
					"full": "<b>import React</b> from 'react'\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"row-start-3 w-full flex flex-col gap-8 mt-0 justify-between items-center p-8\">\n        <div className=\"flex gap-2 flex-wrap items-center justify-center\">\n          <a\n              aria-label=\"my email address\"\n              className=\"flex items-center hover:underline hover:underline-offset-4 hover:bg-[hsl(var(--teal-100))] hover:bg-opacity-10 rounded-full p-3 text-[#787B89] hover:text-[hsl(var(--teal-700))]\"\n              href=\"mailto:abdibrokhim@gmail.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18px\" height=\"18px\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-mail\"><path d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\"></path><polyline points=\"22,6 12,13 2,6\"></polyline></svg>\n          </a>\n          <a\n              aria-label=\"my gitHub\"\n              className=\"flex items-center hover:underline hover:underline-offset-4 hover:bg-[hsl(var(--teal-100))] hover:bg-opacity-10 rounded-full p-3 text-[#787B89] hover:text-[hsl(var(--teal-700))]\"\n              href=\"https://github.com/abdibrokhim\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <svg width=\"18px\" height=\"18px\" strokeWidth=\"0\" viewBox=\"0 0 98 96\" xmlns=\"http://www.w3.org/2000/svg\"><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z\" fill=\"currentColor\"/></svg>\n          </a>\n          <a\n              aria-label=\"my discord community\"\n              className=\"flex items-center hover:underline hover:underline-offset-4 hover:bg-[hsl(var(--teal-100))] hover:bg-opacity-10 rounded-full p-3 text-[#787B89] hover:text-[hsl(var(--teal-700))]\"\n              href=\"https://discord.gg/nVtmDUN2sR\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 16 16\" height=\"18px\" width=\"18px\" xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\"><path d=\"M13.545 2.907a13.2 13.2 0 0 0-3.257-1.011.05.05 0 0 0-.052.025c-.141.25-.297.577-.406.833a12.2 12.2 0 0 0-3.658 0 8 8 0 0 0-.412-.833.05.05 0 0 0-.052-.025c-1.125.194-2.22.534-3.257 1.011a.04.04 0 0 0-.021.018C.356 6.024-.213 9.047.066 12.032q.003.022.021.037a13.3 13.3 0 0 0 3.995 2.02.05.05 0 0 0 .056-.019q.463-.63.818-1.329a.05.05 0 0 0-.01-.059l-.018-.011a9 9 0 0 1-1.248-.595.05.05 0 0 1-.02-.066l.015-.019q.127-.095.248-.195a.05.05 0 0 1 .051-.007c2.619 1.196 5.454 1.196 8.041 0a.05.05 0 0 1 .053.007q.121.1.248.195a.05.05 0 0 1-.004.085 8 8 0 0 1-1.249.594.05.05 0 0 0-.03.03.05.05 0 0 0 .003.041c.24.465.515.909.817 1.329a.05.05 0 0 0 .056.019 13.2 13.2 0 0 0 4.001-2.02.05.05 0 0 0 .021-.037c.334-3.451-.559-6.449-2.366-9.106a.03.03 0 0 0-.02-.019m-8.198 7.307c-.789 0-1.438-.724-1.438-1.612s.637-1.613 1.438-1.613c.807 0 1.45.73 1.438 1.613 0 .888-.637 1.612-1.438 1.612m5.316 0c-.788 0-1.438-.724-1.438-1.612s.637-1.613 1.438-1.613c.807 0 1.451.73 1.438 1.613 0 .888-.631 1.612-1.438 1.612\"></path></svg>\n            </a>\n            <a\n              aria-label=\"my linkedIn\"\n              className=\"flex items-center hover:underline hover:underline-offset-4 hover:bg-[hsl(var(--teal-100))] hover:bg-opacity-10 rounded-full p-3 text-[#787B89] hover:text-[hsl(var(--teal-700))]\"\n              href=\"https://linkedin.com/in/abdibrokhim\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 448 512\" height=\"18px\" width=\"18px\" xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\"><path d=\"M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z\"></path></svg>\n            </a>\n            <a\n              aria-label=\"me x\"\n              className=\"flex items-center hover:underline hover:underline-offset-4 hover:bg-[hsl(var(--teal-100))] hover:bg-opacity-10 rounded-full p-3 text-[#787B89] hover:text-[hsl(var(--teal-700))]\"\n              href=\"https://x.com/abdibrokhim\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" height=\"18px\" width=\"18px\" xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\"><path d=\"M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z\"></path></svg>\n            </a>\n            <a\n              aria-label=\"my insta\"\n              className=\"flex items-center hover:underline hover:underline-offset-4 hover:bg-[hsl(var(--teal-100))] hover:bg-opacity-10 rounded-full p-3 text-[#787B89] hover:text-[hsl(var(--teal-700))]\"\n              href=\"https://instagram.com/that21savage_\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"18px\" height=\"18px\" viewBox=\"0 0 30 30\" stroke=\"currentColor\" fill=\"none\" strokeWidth=\"2\"><path d=\"M 9.9980469 3 C 6.1390469 3 3 6.1419531 3 10.001953 L 3 20.001953 C 3 23.860953 6.1419531 27 10.001953 27 L 20.001953 27 C 23.860953 27 27 23.858047 27 19.998047 L 27 9.9980469 C 27 6.1390469 23.858047 3 19.998047 3 L 9.9980469 3 z M 22 7 C 22.552 7 23 7.448 23 8 C 23 8.552 22.552 9 22 9 C 21.448 9 21 8.552 21 8 C 21 7.448 21.448 7 22 7 z M 15 9 C 18.309 9 21 11.691 21 15 C 21 18.309 18.309 21 15 21 C 11.691 21 9 18.309 9 15 C 9 11.691 11.691 9 15 9 z M 15 11 A 4 4 0 0 0 11 15 A 4 4 0 0 0 15 19 A 4 4 0 0 0 19 15 A 4 4 0 0 0 15 11 z\"></path></svg>\n            </a>\n            <a\n              aria-label=\"my youtube channel\"\n              className=\"flex items-center hover:underline hover:underline-offset-4 hover:bg-[hsl(var(--teal-100))] hover:bg-opacity-10 rounded-full p-3 text-[#787B89] hover:text-[hsl(var(--teal-700))]\"\n              href=\"https://youtube.com/@TechWithAbee\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <svg width=\"18px\" height=\"18px\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M21.5813 7.19989C21.4733 6.76846 21.2534 6.37318 20.9438 6.05395C20.6341 5.73473 20.2457 5.50287 19.8178 5.3818C18.2542 5 12 5 12 5C12 5 5.74578 5 4.18222 5.41816C3.75429 5.53923 3.36588 5.77109 3.05623 6.09031C2.74659 6.40954 2.52666 6.80482 2.41868 7.23625C2.13253 8.82303 1.99255 10.4327 2.00052 12.0451C1.99032 13.6696 2.1303 15.2916 2.41868 16.8903C2.53773 17.3083 2.76258 17.6886 3.0715 17.9943C3.38043 18.3 3.76299 18.5209 4.18222 18.6357C5.74578 19.0538 12 19.0538 12 19.0538C12 19.0538 18.2542 19.0538 19.8178 18.6357C20.2457 18.5146 20.6341 18.2827 20.9438 17.9635C21.2534 17.6443 21.4733 17.249 21.5813 16.8176C21.8653 15.2427 22.0052 13.6453 21.9995 12.0451C22.0097 10.4206 21.8697 8.79862 21.5813 7.19989Z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/><path d=\"M9.75 9.46533C9.75 8.98805 9.75 8.74941 9.84974 8.61618C9.93666 8.50008 10.0697 8.42744 10.2144 8.4171C10.3804 8.40525 10.5811 8.53429 10.9826 8.79239L14.9254 11.3271C15.2738 11.551 15.448 11.663 15.5082 11.8054C15.5607 11.9298 15.5607 12.0702 15.5082 12.1946C15.448 12.337 15.2738 12.449 14.9254 12.6729L10.9826 15.2076C10.5811 15.4657 10.3804 15.5948 10.2144 15.5829C10.0697 15.5726 9.93666 15.4999 9.84974 15.3838C9.75 15.2506 9.75 15.012 9.75 14.5347V9.46533Z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/></svg>\n            </a>\n        </div>\n        <div className=\"\">\n          <p className=\"text-sm text-center text-[var(--text-c)]\">\n            © 2024 JUSTMAKETHINGS. All rights reserved.\n          </p>\n        </div>\n      </footer>\n\n  )\n}\n\nexport default Footer",
					"snippet": "<b>import React</b> from 'react'"
				},
				"path": {
					"raw": "src/app/components/Footer.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/justmakethings"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "// require('dotenv').config();\n<b>import React</b> from 'react';\nimport colors from '../colors';\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/material/styles';\nimport { teal } from '@mui/material/colors';\nimport Stack from '@mui/material/Stack';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\n\nimport Minter from './Minter';\n\nconst GenerationPrompt = ({ onGenerateNFTClick, onSubmitClick, setAltText }) => {\n    const fetch = require('node-fetch');\n\n    const { Configuration, OpenAIApi } = require(\"openai\");\n        \n    const configuration = new Configuration({\n        organization: process.env.OPENAI_ORG,\n        apiKey: process.env.OPENAI_API_KEY,\n    });\n    let apiKey = process.env.OPENAI_API_KEY;\n    console.log('apiKey', apiKey);\n\n    const openai = new OpenAIApi(configuration);\n\n    const [description, setDescription] = React.useState('');\n    const [loading, setLoading] = React.useState(false);\n    const [imageURL, setImageURL] = React.useState('');\n    const [isDownloaded, setIsDownloaded] = React.useState(false);\n    const [fileName, setFileName] = React.useState('');\n    const [alertText, setAlertText] = React.useState([]);\n    \n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    React.useEffect(() => {\n        if (isDownloaded === false) {\n            onGenerateNFTClick(imageURL);\n            setAltText(description);\n        }\n    }, []);\n\n    const Alert = React.forwardRef(function Alert(props, ref) {\n        return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n    });\n\n    const Stackbar = () => {\n        return (\n            <Stack spacing={2} sx={{ width: '100%' }}>\n            <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity={alertText.status} sx={{ width: '100%', color: 'white'}}>\n                    {alertText.message}\n                </Alert>\n            </Snackbar>\n            </Stack>\n        );\n    };\n\n    const downloadImage = async ({ imageURL }) => {\n        try {\n            if (imageURL.length > 0) {\n                fetch(`http://localhost:3005/api/download-image?url=${imageURL}`)\n                    .then(response => response.json())\n                    .then(data => {\n                        if (data.success) {\n                            const file_path = data.message;\n                            console.log(file_path);\n                            \n                            setFileName(file_path);\n\n                            setIsDownloaded(true);\n                        } else {\n                            const error = data.error;\n                            console.error(error);\n                        }\n                    })\n                    .catch(error => {\n                        console.error('Error:', error);\n                        setOpen(true);\n                        setAlertText({status: 'error', message: 'Error: Failed to catch image'});\n                    });\n            } else {\n                console.error('Error: Image URL is empty');\n                setOpen(true);\n                setAlertText({status: 'error', message: 'Error: Image URL is empty'});\n            }\n        } catch (error) {\n            console.error('Error:', error);\n            setOpen(true);\n            setAlertText({status: 'error', message: 'Error: Failed to download image'});\n        }\n    };\n\n    const generateNFT = () => {\n        console.log('Generating NFT...');\n        setOpen(true);\n        setAlertText({status: 'info', message: 'Info: Generating NFT...'});\n\n        let response = null;\n\n        try {\n            response = openai.createImage({\n                prompt: description,\n                n: 1,\n                size: \"256x256\",\n            });\n            console.log(response);\n            \n            if (response) {\n                const image_url = resData.data.data[0].url;\n    \n                if (image_url === '') {\n                    setOpen(true);\n                    setAlertText({status: 'error', message: 'Error: Failed to generate image'});\n                    return;\n                } else {\n                    setImageURL(image_url);\n                    setOpen(true);\n                    setAlertText({status: 'success', message: 'Success: Image generated'});\n                    downloadImage(image_url);\n                }\n                \n                console.log('Image URL: ', imageURL);\n                \n            } else {\n                setOpen(true);\n                setAlertText({status: 'error', message: 'Error: Failed to get response'});\n                return;\n            }\n        } catch (error) {\n            console.error('Error:', error);\n            setOpen(true);\n            setAlertText({status: 'error', message: 'Error: Failed to generate image'});\n        }\n        setLoading(false);\n\n        onSubmitClick(false);\n    };\n\n    function handleSubmit(e) {\n        e.preventDefault();\n\n        onSubmitClick(true);\n        \n        setDescription(description);\n    }\n\n    const disabledStyle = {\n        cursor: 'not-allowed',\n    };\n\n    const ColorButton = styled(Button)(({ theme }) => ({\n        color: theme.palette.getContrastText(teal[600]),\n        backgroundColor: teal[600],\n        padding: '10px 40px',\n        marginTop: '20px',\n        borderRadius: '5px',\n        '&:hover': {\n          backgroundColor: teal[900],\n        },\n        '&:disabled': {\n            backgroundColor: teal[400],\n            color: theme.palette.getContrastText(teal[400]),\n            cursor: 'not-allowed',\n        }\n    }));\n\n    return (\n        <div \n            className=''>\n            {open ? Stackbar() : <></>}\n            <div \n                className=''\n                style={{\n                    backgroundColor: colors.content_bg_dark,\n                    padding: '20px',\n                    borderRadius: '5px',\n                }}>\n                <form\n                    onSubmit={handleSubmit}\n                >\n                    <div\n                        style={{\n                            color: colors.const_light_text,\n                            fontSize: '20px',\n                            fontWeight: 'bold',\n\n                        }}   \n                    >\n                        Description\n                    </div>\n                    <div\n                        style={{\n                            color: colors.const_light_text,\n                            fontSize: '14px',\n\n                        }}   \n                    >\n                        Description of your NFT\n                    </div>\n                    <textarea\n                        className=''\n                        style={{\n                            width: '100%',\n                            height: '100px',\n                            padding: '10px',\n                            marginTop: '15px',\n                            border: 'none',\n                            fontSize: '16px',\n                            borderRadius: '5px',\n                            resize: 'none',\n                            backgroundColor: colors.button_bg_primary,\n                            color: colors.const_dark_text,\n                            outline: 'none',\n                        }}\n                        placeholder='Enter your text here'\n                        onChange={(e) => setDescription(e.target.value)}\n                    >\n                    </textarea>\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'flex-start',\n                            gap: '20px',\n                        }}\n                    >\n                        <ColorButton \n                            disabled={loading || description.length === 0}\n                            variant=\"contained\" \n                            type=\"submit\"\n                            onClick={() => generateNFT()}\n                            >\n                                Generate\n                        </ColorButton>\n                        <Minter name={description} path={fileName}/>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default GenerationPrompt;\n",
					"snippet": "<b>import React</b> from 'react';"
				},
				"path": {
					"raw": "alNFT/frontend/components/GenerationPrompt.jsx"
				},
				"repo": {
					"raw": "abdibrokhim/hacked-dApp"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b> from 'react';\nimport {\n    MapContainer, \n    TileLayer, \n    Marker,\n    Popup,\n } from 'react-leaflet'\n\nconst Map = () => {\n    return (\n        <MapContainer \n            center={[51.505, -0.09]} \n            zoom={13} \n            scrollWheelZoom={false}>\n            <TileLayer\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <Marker position={[51.505, -0.09]}>\n                <Popup>\n                    A pretty CSS3 popup. \n                    <br /> \n                    Easily customizable.\n                </Popup>\n            </Marker>\n        </MapContainer>\n    );\n}\n\nexport default Map;",
					"snippet": "<b>import React</b> from 'react';"
				},
				"path": {
					"raw": "frontend/src/components/Map.js"
				},
				"repo": {
					"raw": "abdibrokhim/Mosque-ReactApp"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b>, { useState } from 'react'\nimport { Button } from \"../components/ui/button\"\nimport { ArrowLeft, ArrowRight } from 'lucide-react'\n\ninterface ColorSelectorProps {\n  colors: {\n    [key: string]: string[]\n  }\n  onColorSelect: (color: string) => void\n  selectedColor: string\n  onCustomColorChange: (color: string) => void\n}\n\nconst ColorSelector: React.FC<ColorSelectorProps> = ({ colors, onColorSelect, selectedColor, onCustomColorChange }) => {\n  const [currentPalette, setCurrentPalette] = useState(0)\n  const colorCategories = Object.keys(colors)\n\n  const nextPalette = () => {\n    setCurrentPalette((prev) => (prev + 1) % colorCategories.length)\n  }\n\n  const prevPalette = () => {\n    setCurrentPalette((prev) => (prev - 1 + colorCategories.length) % colorCategories.length)\n  }\n\n  const currentCategory = colorCategories[currentPalette]\n  const currentColors = colors[currentCategory]\n\n  return (\n    <div className=\"space-y-4 color-selector mx-auto\">\n      <div className=\"flex items-center justify-between gap-4\">\n        <Button \n          onClick={prevPalette}\n          variant=\"ghost\"\n          className=\"p-2\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n        </Button>\n\n        <div className=\"flex-1 overflow-x-auto no-scrollbar\">\n          <div className=\"flex flex-col gap-2\">\n            <h3 className=\"text-center text-sm font-medium text-[var(--text-a)]\">\n              {currentCategory.toUpperCase()}\n            </h3>\n            <div className=\"flex gap-2 px-2\">\n              {currentColors.map((color) => (\n                <Button\n                  key={color}\n                  className=\"w-8 h-8 rounded-md p-0 border-2 flex-shrink-0\"\n                  style={{ backgroundColor: color, borderColor: selectedColor === color ? 'white' : color }}\n                  onClick={() => onColorSelect(color)}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <Button \n          onClick={nextPalette}\n          variant=\"ghost\"\n          className=\"p-2\"\n        >\n          <ArrowRight className=\"w-4 h-4\" />\n        </Button>\n      </div>\n\n      <div className=\"flex justify-center gap-2\">\n        {colorCategories.map((category, index) => (\n          <div\n            key={category}\n            className={`w-2 h-2 rounded-full transition-colors ${\n              index === currentPalette ? 'bg-white' : 'bg-gray-500'\n            }`}\n            onClick={() => setCurrentPalette(index)}\n          />\n        ))}\n      </div>\n\n      <div className=\"flex justify-center items-center space-x-4\">\n        <input\n          type=\"color\"\n          value={selectedColor}\n          onChange={(e) => onCustomColorChange(e.target.value)}\n          className=\"w-8 h-8 rounded-md bg-[#e5e5e5] overflow-hidden\"\n        />\n        <span className=\"text-sm font-medium bg-transparent\">{selectedColor}</span>\n      </div>\n    </div>\n  )\n}\n\nexport default ColorSelector\n",
					"snippet": "<b>import React</b>, { useState } from 'react'"
				},
				"path": {
					"raw": "src/app/components/ColorSelector.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/2025-stickies"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b>, { useEffect, useState } from \"react\";\nimport icons from \"./icons\"; \nimport { Snackbar } from \"@mui/material\";\nimport { Alert } from \"@mui/material\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\n\nconst App = () => {\n\n  const [input, setInput] = useState(\"\");\n  const [chatItems, setChatItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [proceeded, setProceeded] = useState(false);\n  const [notificationOpen, setNotificationOpen] = useState(false);\n  const [notificationSeverity, setNotificationSeverity] = useState({severity: \"info\", message: \"Test notification\"});\n\n  let chatChatGPTURL = `https://fastapi-example-grdr.onrender.com/api/chat/chatgpt/${input}`;\n  let uploadURL = `https://fastapi-example-grdr.onrender.com/api/upload/`;\n\n  const showNotification = (severity) => {\n    setNotificationSeverity(severity);\n    setNotificationOpen(true);\n  };\n  \n  const hideNotification = () => {\n    setNotificationOpen(false);\n  };\n\n  const handleDropdownChange = (event) => {\n    console.log('selected model: ', event.target.value);\n  };\n  \n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    setSelectedFile(file);\n    setProceeded(false);\n  };\n\n  const handleProceed = () => {\n    console.log('Uploading: ', selectedFile);\n\n    setLoading(true);\n\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n\n    fetch(uploadURL, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'multipart/form-data',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'POST',\n        'Access-Control-Allow-Headers': 'Content-Type , Authorization',\n        'Access-Control-Allow-Credentials': 'true'\n      },\n      body: formData\n    })\n      .then(response => {\n        console.log(response);\n        if (response.ok) {\n          console.log('File uploaded successfully');\n          showNotification({severity: \"success\", message: \"File uploaded successfully\"});\n        } else {\n          throw new Error('Error uploading file');\n        }\n      })\n      .catch(error => {\n        console.error('Error uploading file:', error);\n        // showNotification({severity: \"error\", message: \"Error uploading file\"});\n        showNotification({severity: \"info\", message: \"It's confusing, but the file should be uploaded successfully\"});\n      })\n\n      setLoading(false);\n      \n      setProceeded(true);\n\n  };\n\n\n  const completion = async () => {\n\n    setLoading(true);\n    \n    console.log('----------------');\n    console.log(chatItems);\n    console.log('----------------');\n    console.log(input+chatItems.map((item) => item.content).join('\\n'))\n    console.log('================');\n\n  \n    fetch(chatChatGPTURL, {\n      method: 'GET',  \n      headers: {\n          'Accept': 'application/json'\n\n        }\n      })\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Request failed');\n        }\n      })\n      .then(data => {\n        console.log(data);\n        if (data) {\n          setChatItems([\n            ...chatItems,\n            { content: data, isAnswer: true },\n          ]);\n        }\n      })\n      .catch(err => {\n          console.log(err);\n      })\n\n    setLoading(false);\n    \n    setInput('');\n  };\n\n  useEffect(() => {\n    if (chatItems.length === 0) return;\n    if (chatItems[chatItems.length - 1].isAnswer) return;\n    \n    completion();\n\n  }, [chatItems]);\n\n  function handleSubmit(e) {\n\n    e.preventDefault();\n    setChatItems([...chatItems, { content: input, isAnswer: false }]);\n  }\n\n  const ChatItem = ({ isAnswer, content }) => {\n    return (\n      <li className={`flex ${isAnswer ? \"justify-start\" : \"justify-end\"}`}>\n        <div\n          className={`relative max-w-xl px-4 py-2 text-gray-700 rounded shadow ${\n            !isAnswer ? \"bg-gray-100\" : \"\"\n          }`} style={{whiteSpace: 'pre-wrap'}}>\n            {content.toString().trim()}\n        </div>\n      </li>\n    );\n  };\n\n\n  return (\n    <div className=\"overflow-hidden w-full z-20 h-full relative\">\n\n      <Snackbar\n        open={notificationOpen}\n        autoHideDuration={3000}\n        onClose={hideNotification}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      >\n        <Alert onClose={hideNotification} severity={notificationSeverity.severity}>\n          {notificationSeverity.message}\n        </Alert>\n      </Snackbar>\n\n      <div className=\"flex h-full flex-1 flex-col md:pl-[260px]\">\n        <main className=\"relative h-full w-full transition-width flex flex-col overflow-hidden items-stretch flex-1\">\n          <div className=\"flex-1 overflow-auto\">\n            <div className=\"stretch mx-2 flex flex-row gap-3 pt-2 last:mb-2 md:last:mb-6 lg:mx-auto lg:max-w-3xl lg:pt-6\">\n              <ul className=\"space-y-2 w-full\">\n                {chatItems.map((item, i) => (\n                  <ChatItem\n                    key={i}\n                    isAnswer={item.isAnswer}\n                    content={item.content}\n                  />\n                ))}\n              </ul>\n            </div>\n          </div>\n          <div className=\"w-full border-t md:border-t-0 dark:border-white/20 md:border-transparent md:dark:border-transparent md:bg-vert-light-gradient bg-white dark:bg-gray-800 md:!bg-transparent dark:md:bg-vert-dark-gradient\">\n            <form\n              onSubmit={handleSubmit}\n              className=\"stretch mx-2 flex flex-row gap-3 pt-2 last:mb-2 md:last:mb-6 lg:mx-auto lg:max-w-3xl lg:pt-6\">\n              <div className=\"relative flex h-full flex-1 md:flex-col\">\n                <div className=\"ml-1 mt-1.5 md:w-full md:m-auto md:flex md:mb-2 gap-2 justify-center\"></div>\n                <div className=\"flex flex-col w-full py-2 pl-3 flex-grow md:py-3 md:pl-4 relative border border-black/10 bg-white dark:border-gray-900/50 dark:text-dark text-dark dark:bg-gray-700 rounded-md shadow-[0_0_10px_rgba(0,0,0,0.10)] dark:shadow-[0_0_15px_rgba(0,0,0,0.10)]\">\n                  <textarea\n                    value={loading ? \"\" : input}\n                    tabIndex=\"0\"\n                    rows=\"1\"\n                    placeholder=\"Write a message...\"\n                    onChange={(e) => setInput(e.target.value)}\n                    className=\"m-0 w-full resize-none border-0 bg-transparent p-0 pr-7 focus:ring-0 focus-visible:ring-0 dark:bg-transparent\"></textarea>\n                  <button\n                    disabled={loading || input === \"\" || proceeded === false}\n                    id=\"chat-submit\"\n                    type=\"submit\"\n                    className=\"absolute p-1 rounded-md text-gray-500 bottom-1.5 right-1 md:bottom-2.5 md:right-2 hover:bg-gray-100 dark:hover:text-gray-400 dark:hover:bg-gray-900 disabled:hover:bg-transparent dark:disabled:hover:bg-transparent\">\n                    {loading ? icons.spinner : icons.sendIcon}\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </main>\n      </div>\n      <div className=\"dark hidden bg-gray-900 md:fixed md:inset-y-0 md:flex md:w-[260px] md:flex-col\">\n        <div className=\"flex h-full min-h-0 flex-col\">\n          <div className=\"scrollbar-trigger flex h-full w-full flex-1 items-start border-white/20\">\n            <nav className=\"flex h-full flex-1 flex-col space-y-1 p-2\">\n                <select\n                  className=\"flex py-3 px-3 items-center gap-3 rounded-md bg-gray-500/10 transition-colors duration-200 text-white cursor-pointer text-sm mb-2 flex-shrink-0 border border-white/20\"\n                  onChange={handleDropdownChange}\n                >\n                  <option value=\"chatgpt\">GPT-4o mini</option>\n                </select>\n              <label\n                htmlFor=\"fileInput\"\n                className=\"flex py-3 px-3 items-center gap-3 rounded-md hover:bg-gray-500/10 transition-colors duration-200 text-white cursor-pointer text-sm mb-2 flex-shrink-0 border border-white/20\"\n              >\n                <svg\n                  stroke=\"currentColor\"\n                  fill=\"none\"\n                  strokeWidth=\"2\"\n                  viewBox=\"0 0 24 24\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  className=\"h-4 w-4\"\n                  height=\"1em\"\n                  width=\"1em\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n                  <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\n                </svg>\n                <span>Upload New File</span>\n                <input\n                  id=\"fileInput\"\n                  type=\"file\"\n                  className=\"hidden\"\n                  onChange={handleFileChange}\n                />\n              </label>\n              {selectedFile && (\n                <div className=\"text-white text-sm px-4 py-4\">\n                  <div>Uploaded file: {selectedFile.name}</div>\n                  <button\n                    disabled={proceeded === true}\n                    className={`mt-2 hover:underline focus:outline-none ${proceeded === true ? 'text-green-500' : 'text-blue-500'}`}\n                    onClick={handleProceed}\n                  >\n                    {proceeded === true ? \"Proceeded\" : \"Proceed\"}\n                  </button>\n                </div>\n              )}\n            </nav>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n",
					"snippet": "<b>import React</b>, { useEffect, useState } from \"react\";"
				},
				"path": {
					"raw": "src/App.jsx"
				},
				"repo": {
					"raw": "abdibrokhim/chatwithpdf-web"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b> from \"react\";\n<b>import React</b>DOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n   <Router>\n    <App />\n  </Router>\n  </React.StrictMode>\n);",
					"snippet": "<b>import React</b> from \"react\";\n<b>import React</b>DOM from \"react-dom/client\";"
				},
				"path": {
					"raw": "src/main.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/monkeytype-ai"
				},
				"total_matches": {
					"raw": 2
				}
			},
			{
				"content": {
					"full": "<b>import React</b> from \"react\";\nimport Select from \"react-select\";\nimport monacoThemes from \"../lib/defineTheme\";\nimport { customStyles } from \"../constants/customStyles\";\n\nconst ThemeDropdown = ({ handleThemeChange, theme }) => {\n  return (\n    <Select\n      instanceId=\"theme\"\n      placeholder={`Select Theme`}\n      options={Object.entries(monacoThemes).map(([themeId, themeName]) => ({\n        label: themeName,\n        value: themeId,\n        key: themeId,\n      }))}\n      value={theme}\n      styles={customStyles}\n      onChange={handleThemeChange}\n    />\n  );\n};\n\nexport default ThemeDropdown;\n",
					"snippet": "<b>import React</b> from \"react\";"
				},
				"path": {
					"raw": "src/app/components/ThemeDropdown.jsx"
				},
				"repo": {
					"raw": "abdibrokhim/ai-coding-interviewer"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b>, { useEffect } from 'react';\n\ntype NotificationProps = {\n  message: string;\n  type: 'error' | 'success' | 'info';\n  onClose: () => void;\n};\n\nconst Notification: React.FC<NotificationProps> = ({ message, type, onClose }) => {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onClose();\n    }, 3000); // Auto-close after 3 seconds\n    return () => clearTimeout(timer);\n  }, [onClose]);\n\n  const bgColor = type === 'error' ? 'bg-[#f84f31]' : type === 'success' ? 'bg-[#23c552]' : 'bg-[#1e90ff]';\n\n  return (\n    <div className={`fixed w-[300px] text-xs sm:text-md top-10 left-1/2 transform -translate-x-1/2 ${bgColor} text-white px-4 py-2 rounded-md shadow-lg z-50`}>\n      <p>{message}</p>\n    </div>\n  );\n};\n\nexport default Notification;",
					"snippet": "<b>import React</b>, { useEffect } from 'react';"
				},
				"path": {
					"raw": "src/app/utils/notify.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/loom-dl-web"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "import {styled} from '@mui/material'\nimport {Route, Routes} from 'react-router-dom'\nimport {Notifications} from './components/Notifications/Notifications.component'\nimport classNames from 'classnames'\n<b>import React</b> from 'react'\nimport {PageLayoutComponent} from \"./components/pageLayout/pageLayout.component\";\n\nimport {UserSettingsPage} from \"./pages/UserSettings/UserSettings.component\";\nimport {HomePage} from \"./pages/Home/home.component\";\nimport {ChatPage} from \"./pages/Chat/chat.component\";\n\nconst AppContainer = styled('div')`\n  color: ${(props) => (props.theme.palette.mode === 'light' ? '#000' : '#fff')};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\nconst AppBackgroundContainer = styled('div')`\n  position: fixed;\n  background: ${(props) => (props.theme.palette.mode === 'light' ? '#F6F6F9' : '#ffff')};\n  z-index: -1;\n  inset: 0;\n  overflow: hidden;\n`\nexport const AppCruncher = () => {\n    return (\n        <>\n            <Notifications/>\n            <AppBackgroundContainer />\n            <AppContainer\n                className={classNames({\n                    app: true,\n                })}\n            >\n                <Routes>\n                    <Route path=\"/\" element={<PageLayoutComponent/>}>\n                        <Route index element={<HomePage/>}/>\n                        <Route path=\"user\" element={<UserSettingsPage/>}/>\n                        <Route path=\"chat/:id\" element={<ChatPage/>}/>\n                        <Route path=\"*\" element={<HomePage/>}/>\n                    </Route>\n                </Routes>\n            </AppContainer>\n        </>\n    )\n}\n",
					"snippet": "<b>import React</b> from 'react'"
				},
				"path": {
					"raw": "report-cruncher-client/src/App.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/report-cruncher"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "import { Page, Text, View, Document, StyleSheet, renderToStream, Image, Font } from '@react-pdf/renderer';\nimport { Timestamp } from 'firebase/firestore';\nimport { NextResponse } from 'next/server';\nimport { Patient, Hospital, ReportProps } from '../../types';\n\nconst studyType = \"PROTOCOL OF MRI STUDY OF THE BRAIN\";\nconst disclaimerA = 'This conclusion is not a final diagnosis and requires comparison with clinical and laboratory data.';\nconst disclaimerB = `In case of typos, contact phone: `;\n\nFont.register({\n  family: 'Oswald',\n  src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'\n});\n\nconst styles = StyleSheet.create({\n  body: {\n    paddingTop: 35,\n    paddingBottom: 65,\n    paddingHorizontal: 35,\n  },\n  subSubTitle: {\n    fontSize: 16,\n    textAlign: 'left',\n    fontFamily: 'Oswald'\n  },\n  infoHeader: {\n    borderBottom: 1,\n    marginBottom: 4,\n    fontSize: 10,\n    textAlign: 'left',\n    fontFamily: 'Oswald'\n  },\n  author: {\n    fontSize: 12,\n    textAlign: 'center',\n    marginBottom: 40,\n  },\n  subtitle: {\n    fontSize: 16,\n    margin: 10,\n    fontFamily: 'Oswald'\n  },\n  headerTitle: {\n    fontSize: 14,\n    marginTop: 6,\n    marginBottom: 6,\n    fontFamily: 'Oswald'\n  },\n  headerTitleWithBorder: {\n    borderBottom: 1,\n    fontSize: 14,\n    marginTop: 6,\n    marginBottom: 6,\n    fontFamily: 'Oswald'\n  },\n  headerTitleCentered: {\n    textAlign: 'center',\n    fontSize: 10,\n    marginTop: 6,\n    marginBottom: 6,\n    fontFamily: 'Oswald'\n  },\n  makeRow: {\n    marginTop: 4,\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  text: {\n    marginTop: 2,\n    marginBottom: 2,\n    fontSize: 8,\n    fontFamily: 'Times-Roman'\n  },\n  notes: {\n    marginTop: 1,\n    marginBottom: 2,\n    fontSize: 6,\n    textAlign: 'left',\n    fontFamily: 'Times-Roman'\n  },\n  headerText: {\n    fontSize: 8,\n    fontFamily: 'Times-Roman'\n  },\n  image: {\n    width: 200,\n    height: 200,\n    marginBottom: 10,\n  },\n  imageCenter: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  header: {\n    marginBottom: 10,\n    textAlign: 'center',\n    color: 'black',\n  },\n  footer: {\n    marginBottom: 20,\n    textAlign: 'center',\n    color: 'grey',\n    bottom: 10,\n    margin: 'auto',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  footerText: {\n    fontSize: 6,\n    textAlign: 'center',\n    marginBottom: 4,\n  },\n  pageNumber: {\n    position: 'absolute',\n    fontSize: 12,\n    bottom: 30,\n    left: 0,\n    right: 0,\n    textAlign: 'center',\n    color: 'grey',\n  },\n  section: {\n    marginBottom: 10\n  },\n  main: {\n    position: 'relative',\n  },\n  border: {\n    border: 1,\n    paddingVertical: 100,\n    paddingHorizontal: 100,\n    marginBottom: 10,\n  },\n});\n\ninterface ReportTemplateProps {\n  report: {\n    patientDetails: Patient,\n    hospitalDetails: Hospital,\n    imageUrls: string[],\n    conclusionText: string,\n    radiologistName: string,\n    headDoctorName: string,\n    createdAt: Timestamp,\n  };\n}\n\nfunction formatTimestampToDate(timestamp: { seconds: number; nanoseconds: number }): string {\n  const milliseconds = timestamp.seconds * 1000 + timestamp.nanoseconds / 1000000;\n  const date = new Date(milliseconds);\n  return date.toLocaleDateString('en-US');\n}\n\nconst ReportTemplate = ({ report } : ReportTemplateProps) => {\n  return (\n    <Document>\n      <Page style={styles.body}>\n        <View style={styles.main}>\n          <View style={styles.header}>\n            <Text style={styles.headerTitleWithBorder}>{report.hospitalDetails.name.toUpperCase()}</Text>\n            <Text style={styles.headerTitle}>{report.hospitalDetails.department.toUpperCase()}</Text>\n            <Text style={styles.headerText}>{report.hospitalDetails.address}</Text>\n          </View>\n          <View style={styles.makeRow}>\n            <View style={styles.section}>\n              <Text style={styles.infoHeader}>{'Patient Infos'.toUpperCase()}</Text>\n              <Text style={styles.text}>Name: {report.patientDetails.name}</Text>\n              <Text style={styles.text}>Birth Year: {report.patientDetails.birthYear}</Text>\n              <Text style={styles.text}>Phone Number: {report.patientDetails.phoneNumber}</Text>\n            </View>\n            <View style={styles.section}>\n              <Text style={styles.infoHeader}>{'Medicals Infos'.toUpperCase()}</Text>\n              <Text style={styles.text}>Radiologist Name: {report.radiologistName}</Text>\n              <Text style={styles.text}>Doctor Name: {report.headDoctorName}</Text>\n              <Text style={styles.text}>Date: {formatTimestampToDate(report.createdAt)}</Text>\n            </View>\n          </View>\n          <View style={styles.section}>\n            <View style={styles.imageCenter}>\n              <Text style={styles.headerTitleCentered}>{studyType}</Text>\n              {report.imageUrls.map((url, index) => (\n                <Image key={index} src={url} style={styles.image} />\n              ))}\n            </View>\n          </View>\n          <View style={styles.section}>\n            <Text style={styles.headerTitleCentered}>{'Medical Conclusion'.toUpperCase()}</Text>\n            <Text style={styles.text}>{report.conclusionText}</Text>\n          </View>\n          <View style={styles.section}>\n            <Text style={styles.headerTitleCentered}>{'Additional Notes'.toUpperCase()}</Text>\n            <Text style={styles.notes}>(use the given blank space to add any additional notes, comments, and sketches)</Text>\n            <Text style={styles.border}></Text>\n          </View>\n        </View>\n        <View style={styles.footer}>\n          <Text style={styles.footerText}>{disclaimerA}</Text>\n          <Text style={styles.footerText}>{disclaimerB + ' ' + report.hospitalDetails.phone}</Text>\n        </View>\n      </Page>\n    </Document>\n  )\n}\n\n// To store the generated report temporarily\nlet generatedReport: ReportProps | null = null;\n\n// POST request to generate the report\nimport { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { app } from '../../firebaseConfig';\n\n// Initialize Firebase Storage\nconst storage = getStorage(app);\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json(); // Parse the JSON body from the request\n    console.log('Received body: ', body);\n\n    const { report }: ReportProps = body; // Destructure the report from the parsed body\n\n    // Generate the PDF stream\n    const stream = await renderToStream(<ReportTemplate report={report} />);\n    const chunks: Uint8Array[] = [];\n\n    // Collect the chunks from the stream\n    stream.on('data', (chunk) => chunks.push(chunk));\n    await new Promise((resolve, reject) => {\n      stream.on('end', resolve);\n      stream.on('error', reject);\n    });\n\n    // Convert chunks to a Blob\n    const pdfBuffer = Buffer.concat(chunks);\n    const pdfBlob = new Blob([pdfBuffer], { type: 'application/pdf' });\n\n    // Create a reference to the Firebase Storage location\n    const storageRef = ref(storage, `images/report-${Date.now()}.pdf`);\n\n    // Upload the PDF to Firebase Storage\n    await uploadBytes(storageRef, pdfBlob);\n    console.log('PDF uploaded to Firebase Storage.');\n\n    // Get the download URL of the uploaded PDF\n    const downloadUrl = await getDownloadURL(storageRef);\n    console.log('PDF download URL:', downloadUrl);\n\n    return new NextResponse(JSON.stringify({ downloadUrl }), { status: 200, headers: { 'Content-Type': 'application/json' } });\n  } catch (error) {\n    console.error('Error handling POST request:', error);\n    return new NextResponse('Error generating report', { status: 500 });\n  }\n}\n\n// GET request to fetch and display the generated report\nexport async function GET(request: Request) {\n  if (!generatedReport) {\n    return new NextResponse('No report generated yet', { status: 404 });\n  }\n\n  try {\n    const stream = await renderToStream(<ReportTemplate report={generatedReport.report} />);\n    return new NextResponse(stream as unknown as ReadableStream, {\n      headers: {\n        'Content-Type': 'application/pdf',\n      },\n    });\n  } catch (error) {\n    console.error('Error handling GET request:', error);\n    return new NextResponse('Error fetching report', { status: 500 });\n  }\n}",
					"snippet": ""
				},
				"path": {
					"raw": "src/app/api/pdf/route.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/medinaai"
				},
				"total_matches": {
					"raw": 0
				}
			},
			{
				"content": {
					"full": "<b>import React</b>, { useState, useEffect } from 'react';\nimport Image from 'next/image';\n\nconst OverlayCard = ({ handleClose }: { handleClose: () => void }) => {\n\n  return (\n    <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-40 p-8\">\n      <div className=\"relative bg-[#1f2024] rounded-md p-4 max-w-md w-full\">\n        {/* Close Button */}\n        <button\n          onClick={handleClose}\n          aria-label=\"Close Sidebar\"\n          className=\"absolute top-2 left-2 hover:bg-[#A1A2A5] hover:bg-opacity-10 rounded-full p-3\"\n        >\n          <Image\n            aria-hidden\n            src=\"/essentials/close.svg\"\n            alt=\"close icon\"\n            width={22}\n            height={22}\n          />\n        </button>\n        <div className=\"p-4\">\n    <h2 className=\"text-3xl font-bold text-center mb-8 line-through\">\n      🎉 Join our Giveaway 🎉\n    </h2>\n    <h6 className=\"text-md font-bold text-center mb-8 text-[var(--text)]\">\n            but you may still follow us <a href=\"https://x.com/xopencommunity\" target=\"_blank\" className=\"text-[var(--button)] hover:text-[var(--primary)] hover:underline\">Open Community</a>\n          </h6>\n    <Image\n    src=\"/assets/no-giveaway.png\"\n    alt=\"Giveaway Banner\"\n    width={500}\n    height={300}\n    className=\"rounded w-full\"\n  />\n    </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OverlayCard;",
					"snippet": "<b>import React</b>, { useState, useEffect } from 'react';"
				},
				"path": {
					"raw": "src/app/promos/overlaycard.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/opencommunity"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b> from 'react';\n// import colors from '../colors';\n// import faq from '.././faq/faq.json';\n\nconst CustomApiKey = () => {\n    // const [email, setEmail] = React.useState('');\n    const [openai_api_key, setOpenai_api_key] = React.useState([]);\n    // const [error, setError] = React.useState([]);\n\n    const SaveApiKey = () => {\n        localStorage.setItem('openai_api_key', JSON.stringify({key: openai_api_key}));\n        // window.location.reload();\n    }\n\n    return (\n        <div \n            className=''\n            style={{\n                // marginTop: '20px',\n            }}>\n            <div \n                style={{\n                    fontSize: '16px',\n                    // color: '#ba0b32',\n                }}\n                type=\"button\" \n                className=\"primaryHover\" \n                data-bs-toggle=\"modal\" \n                data-bs-target=\"#openai_api_key\">\n                    API Key\n            </div>\n            <div \n                className=\"modal fade\" \n                id=\"openai_api_key\" \n                tabIndex=\"-1\"\n                aria-labelledby=\"openai_api_key\" \n                aria-hidden=\"true\">\n                <div \n                    className=\"modal-dialog modal-dialog-centered\">\n                    <div \n                        className=\"modal-content\">\n                        <div \n                            className=\"modal-header\"\n                            style={{\n                                fontSize: '20px',\n                            }}\n                            >\n                            <div>Your OpenAI API Key. More Stable.\n                                <span \n                                    style={{\n                                        marginLeft: '5px',\n                                        color: '#ba0b32',\n                                    }}>Charge by usage\n                                </span>\n                            </div>\n                        </div>\n                        <div \n                            style={{\n                                fontSize: '16px',\n                            }}\n                            className=\"modal-body\">\n                            <div\n                                className='pb-3 d-flex flex-row gap-2 items-center'\n                                > \n                                <input \n                                    // value={input}\n                                    autoComplete=\"off\"\n                                    autofocus=\"true\"\n                                    style={{\n                                        fontSize: '16px',\n                                        width: '100%',\n                                        height: '40px',\n                                        borderRadius: '5px',\n                                        border: '1px solid #ba0b32',\n                                        padding: '10px',\n                                        outline: 'none',\n                                    }}\n                                    type=\"text\" \n                                    placeholder='Enter OpenAI API Key here'\n                                    onChange={(e) => setOpenai_api_key(e.target.value)}\n                                ></input>\n                                <button \n                                    style={{\n                                        height: '40px',\n                                    }}\n                                    className=\"btn btn-danger pt-2 pb-2 pe-3 ps-3\" \n                                    onClick={SaveApiKey}>\n                                        Save\n                                </button>\n                            </div>\n                            <div className='pb-3 d-flex flex-row gap-2 items-center'>\n                                <div\n                                    className='primaryHover'\n                                    style={{\n                                        cursor: 'pointer',\n                                    }}\n                                    onClick={() => window.location.reload()}\n                                    >\n                                        Reload page\n                                </div>\n                                <div>to apply changes</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default CustomApiKey;",
					"snippet": "<b>import React</b> from 'react';"
				},
				"path": {
					"raw": "frontend/src/components/CustomApiKey.js"
				},
				"repo": {
					"raw": "abdibrokhim/Lychee"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b> from 'react'\n\ninterface ProgressBarProps {\n  isCurrent: boolean\n  onClick: () => void\n}\n\nconst ProgressBar: React.FC<ProgressBarProps> = ({ isCurrent, onClick }) => {\n  return (\n    <div\n      className={`w-full h-1 rounded-full cursor-pointer transition-all duration-300 ${\n        isCurrent ? 'bg-[#625df5]' : 'bg-[#1A1E23]'\n      }`}\n      onClick={onClick}\n    ></div>\n  )\n}\n\nexport default ProgressBar\n\n",
					"snippet": "<b>import React</b> from 'react'"
				},
				"path": {
					"raw": "src/app/wrapped24/components/ProgressBar.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/wrapped24"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b> from 'react';\nimport colors from '../colors';\n\nconst Question = ({ query }) => {\n    return (\n        <div>\n            <div\n                className='cursor-pointer shadow-md hover:shadow-lg transition'\n                style={{\n                    fontSize: '18px',\n                    color: colors.const_dark_text,\n                    marginTop: '20px',\n                    padding: '10px 20px',\n                    // border: `1px solid ${colors.const_dark_subtext}`,\n                    // borderRadius: '10px',\n                }}>\n                {query}\n            </div>\n        </div>\n    );\n}\n\nexport default Question;",
					"snippet": "<b>import React</b> from 'react';"
				},
				"path": {
					"raw": "frontend/src/components/Question.js"
				},
				"repo": {
					"raw": "abdibrokhim/AutoTestExam"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b> from 'react';\n// import colors from '../colors';\n// import faq from '.././faq/faq.json';\n\nconst OpenaiAPIKeyModalError = () => {\n    return (\n        <div \n            className=''\n            style={{\n                // marginTop: '20px',\n            }}>\n            <div \n                style={{\n                    fontSize: '16px',\n                    // color: '#ba0b32',\n                }}\n                type=\"button\" \n                className=\"primaryHover\" \n                data-bs-toggle=\"modal\" \n                data-bs-target=\"#openaiKeyError\">\n                    OpenAI API Key Error!\n            </div>\n            <div \n                className=\"modal fade\" \n                id=\"openaiKeyError\" \n                tabIndex=\"-1\"\n                aria-labelledby=\"openaiKeyError\" \n                aria-hidden=\"true\">\n                <div \n                    className=\"modal-dialog modal-dialog-centered\">\n                    <div \n                        className=\"modal-content\">\n                        <div \n                            className=\"modal-header\"\n                            style={{\n                                fontSize: '20px',\n                            }}\n                            >\n                            <div>OpenAI API Key Error!</div>\n                            <button \n                                type=\"button\" \n                                className=\"btn-close\" \n                                // style={{\n                                //     color: 'black',\n                                //     backgroundColor: '#ba0b32',\n                                // }}\n                                data-bs-dismiss=\"modal\" \n                                aria-label=\"Close\">\n                            </button>\n                        </div>\n                        <div \n                            style={{\n                                fontSize: '16px',\n                            }}\n                            className=\"modal-body\">\n                            <div\n                                className='pb-3'\n                                > \n                                <div className='pt-2'> - Make sure you saved OpenAI API Key.</div>\n                                <div className='pt-2'> - ake sure you have a working OpenAI API Key.</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default OpenaiAPIKeyModalError;",
					"snippet": "<b>import React</b> from 'react';"
				},
				"path": {
					"raw": "frontend/src/components/OpenaiAPIKeyModalError.js"
				},
				"repo": {
					"raw": "abdibrokhim/Lychee"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "'use client';\n\nimport Image from 'next/image';\n<b>import React</b> from 'react';\n\nexport default function Home() {\n    return (\n        <div style={{ fontFamily: 'Courier New, monospace', color: '#00FF00', backgroundColor: '#FFFFE0', padding: '10px', textAlign: 'center' }}>\n            <h1 style={{ color: '#4B0082' }}>WELCOME TO HACKATHON RAPTORS</h1>\n            <Image src=\"https://cdn.prod.website-files.com/65de32a4db6b43b048630aef/65e205d14e76ead77edab322_5038912.png\" width=\"150\" height=\"150\" alt=\"Raptors Logo\" />\n            <marquee style={{ backgroundColor: '#FF69B4' }}>Join us on our mission to innovate and impact!</marquee>\n            <h2>We’re a community of</h2>\n            <h3>experts specializing on</h3>\n            <h3>impactful challenges</h3>\n            <h3 style={{ color: '#B22222' }}>proven Fundraising</h3>\n            <h3>Efficient Scientific Methods</h3>\n            <h3>Top-Tier Software Development</h3>\n            <h3 style={{ color: '#FF4500' }}>altruism-centered events</h3>\n            <h3>respected collaboration</h3>\n            <marquee style={{ backgroundColor: '#FFD700' }}>Join us for upcoming events and collaborations!</marquee>\n            <h2>VALUES</h2>\n            <h3>Ideate. Program. Revolutionize.</h3>\n            <p><a href=\"/demo/leadership-principles\" style={{ color: '#0000FF', textDecoration: 'underline' }}>Learn More</a></p>\n            <h3>Latest Events</h3>\n            <Image src=\"https://cdn.prod.website-files.com/65de32a5db6b43b048630b6a/675c348375ac04ef915f8091_673715109f3ef9cfe2326596_67151330e6e7559ec09923bb_neuro_nostalgia%20(1)%20(1)%20(1).png\" width=\"150\" height=\"150\" alt=\"Event Image\" />\n            <p><strong>BrowserHack — Revolutionizing Productivity With Innovative Tools</strong></p>\n            <p><a href=\"/demo/project/browserhack----revolutionizing-productivity-with-innovative-tools\" style={{ color: '#8A2BE2' }}>Learn more about our events!</a></p>\n            <marquee direction=\"left\" style={{ backgroundColor: '#7FFF00', color: '#000080' }}>Alone we can do so little; together we can do so much.</marquee>\n            <h2>WHO WE ARE?</h2>\n            <p>Event Organization Driven by Decently Experienced Engineers</p>\n            <marquee direction=\"right\" style={{ backgroundColor: '#FF6347', color: '#000080' }}>Over 1500 participants from 30+ countries. Be a part of it!</marquee>\n            <h2>ASSOCIATION</h2>\n            <p><strong>Guild of Expert Engineers</strong></p>\n            <p><a href=\"/demo/fellow-membership\" style={{ color: '#FF00FF', textDecoration: 'none' }}>DISCOVER</a> <a href=\"/demo/our-members\" style={{ color: '#FF00FF', textDecoration: 'none' }}>OUR FELLOWS</a></p>\n            <marquee direction=\"left\" style={{ backgroundColor: '#FF1493', color: '#FFFFFF' }}>SMALL SCALE — BIG IMPACT</marquee>\n            <h2>Contact</h2>\n            <p>Join us for partnerships, proposals, and more.</p>\n            <p>Email: hello@raptors.dev | Phone: +44 1733 833019</p>\n            <marquee style={{ backgroundColor: '#DDA0DD', color: '#008080' }}>Let's Talk - Let's Talk - Let's Talk</marquee>\n        </div>\n    );\n}",
					"snippet": "<b>import React</b> from 'react';"
				},
				"path": {
					"raw": "src/app/demo/page.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/neuronostalgia-hack24"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b>, { useEffect, useRef } from 'react';\nimport PrivateViewSDKClient from '../../components/PrivateViewSDKClient';\nimport { UserInfo } from '../../../lib/types';\n\nimport { Annotation } from '../../../lib/types';\nimport { fetchUserAnnotations, addAnnotation, updateAnnotation, deleteAnnotation } from '../../../lib/annotations';\n\ninterface PrivateModeProps {\n  paperURL: string;\n  userInfo: UserInfo;\n  paperId: string;\n}\n\nconst PrivateMode: React.FC<PrivateModeProps> = ({ paperURL, userInfo, paperId }) => {\n  const viewSDKClientRef = useRef<PrivateViewSDKClient | null>(null);\n  const [selectedText, setSelectedText] = React.useState<string>('');\n  const [showButton, setShowButton] = React.useState<boolean>(false);\n  const [response, setResponse] = React.useState<string>('');\n\n  const viewerConfig = {\n    /* Viewer configuration options */\n    showAnnotationTools: true,\n    enableAnnotationAPIs: true,\n    enableFormFilling: true,\n    showDownloadPDF: true,\n    showPrintPDF: true,\n    showZoomControl: true,\n    defaultViewMode: '',\n  };\n\n  const userId = userInfo.id;\n\n  useEffect(() => {\n    if (!userId) {\n      return;\n    }\n\n    const viewSDKClient = new PrivateViewSDKClient(paperURL, userInfo);\n    viewSDKClientRef.current = viewSDKClient;\n\n    viewSDKClient.ready().then(() => {\n      const viewerConfig = {\n        enableAnnotationAPIs: true,\n        includePDFAnnotations: true,\n      };\n\n      viewSDKClient.previewFile('pdf-div', viewerConfig).then((adobeViewer: any) => {\n        adobeViewer.getAnnotationManager().then((annotationManager: any) => {\n          // Register event listeners\n          annotationManager.registerEventListener(handleAnnotationEvent, {\n            listenOn: ['ANNOTATION_ADDED', 'ANNOTATION_UPDATED', 'ANNOTATION_DELETED'],\n          });\n\n          // Fetch annotations from Firestore and add them to the PDF\n          fetchUserAnnotations(userId, paperId)\n            .then((annotations) => {\n              annotationManager.addAnnotations(annotations).then(() => {\n                console.log('Annotations added to the PDF from Firestore.');\n              });\n            })\n            .catch((error) => {\n              console.error('Error fetching annotations from Firestore:', error);\n            });\n          });\n        });\n      viewSDKClient.registerUserProfileApiHandler();\n    });\n\n    return () => {\n      if (viewSDKClientRef.current) {\n        viewSDKClientRef.current = null;\n      }\n    };\n  }, [paperURL, userId, paperId]);\n\n  const handleAnnotationEvent = (event: any) => {\n    const annotation = event.data as Annotation;\n    if (!userId) return;\n\n    switch (event.type) {\n      case 'ANNOTATION_ADDED':\n        addAnnotation(userId, paperId, annotation)\n          .then(() => {\n            console.log('Annotation added to Firestore.');\n          })\n          .catch((error) => {\n            console.error('Error adding annotation to Firestore:', error);\n          });\n        break;\n      case 'ANNOTATION_UPDATED':\n        updateAnnotation(userId, paperId, annotation)\n          .then(() => {\n            console.log('Annotation updated in Firestore.');\n          })\n          .catch((error) => {\n            console.error('Error updating annotation in Firestore:', error);\n          });\n        break;\n      case 'ANNOTATION_DELETED':\n        deleteAnnotation(userId, paperId, annotation.id)\n          .then(() => {\n            console.log('Annotation deleted from Firestore.');\n          })\n          .catch((error) => {\n            console.error('Error deleting annotation from Firestore:', error);\n          });\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleTextSelection = (event: any) => {\n    console.log('Selected text:', event.data);\n    const selectedContent = event.data.selectedText;\n    if (selectedContent) {\n      setSelectedText(selectedContent);\n      setShowButton(true);\n    } else {\n      // setSelectedText('');\n      setShowButton(false);\n    }\n  };\n\n  const handleGenerateText = async (inputText: string) => {\n    console.log('Generating text...');\n    try {\n      const res = await fetch('/api/generateText', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ input: inputText }),\n      });\n  \n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.error || 'Failed to fetch');\n      }\n  \n      const data = await res.json();\n      const clearedData = data.results[0].generated_text.replace(/\\n/g, ' ').replace(/\"/g, '');\n      setResponse(clearedData);\n    } catch (error: any) {\n      console.error('Error fetching data:', error);\n      alert(`Error: ${error.message}`);\n    }\n  };\n\n  return (\n    <>\n      <div id=\"pdf-div\" className=\"full-window-div\" />\n    </>\n    );\n  };\n\nexport default PrivateMode;",
					"snippet": "<b>import React</b>, { useEffect, useRef } from 'react';"
				},
				"path": {
					"raw": "src/app/modes/privateMode/PrivateMode.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/paperai"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b> from 'react';\nimport axios from 'axios';\n\nconst QuestionPicker = ({ size, onQuestionReady }) => {\n    const [questions, setQuestions] = React.useState([]);\n\n    React.useEffect(() => {\n        console.log('Fetching questions...');\n        axios.defaults.headers.post['Content-Type'] ='application/json; charset=utf-8';\n        axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\n        axios.get(`/v1/api/question-list/size/${size}`)\n            .then(res => {\n                console.log(res.data);\n                setQuestions(res.data);\n                onQuestionReady(res.data);\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }, []);\n\n    return (\n        <></>\n    );\n}\n\nexport default QuestionPicker;",
					"snippet": "<b>import React</b> from 'react';"
				},
				"path": {
					"raw": "frontend/src/components/QuestionPicker.js"
				},
				"repo": {
					"raw": "abdibrokhim/AutoTestExam"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b> from 'react';\nimport colors from '../colors';\n\nconst MultipleChoiceQ = ({ \n    options, \n    correctAnswer, \n    currentQuestionIndex, \n    onChoiceClick, \n    onHandleChecker, \n    onPassedQuestions,\n}) => {\n\n    // const [isCorrect, setIsCorrect] = React.useState('');\n    const [selectedOption, setSelectedOption] = React.useState(null);\n    const [currentQuestionId, setCurrentQuestionId] = React.useState('');\n    const [passedQueries, setPassedQueries] = React.useState([]);\n\n    const onOptionClick = (index) => {\n        console.log('----------currentQuestionId----------');\n        console.log('currentQuestionId: ', currentQuestionId);\n        console.log('----------correctAnswer----------');\n        console.log('correctAnswer: ', correctAnswer);\n        setSelectedOption(index);\n        // onChoiceClick(selectedOption);\n        console.log('----------index----------');\n        console.log('index: ', index);\n        if (parseInt(index) === parseInt(correctAnswer)) {\n            console.log('Correct');\n            onHandleChecker(true);\n            if (!passedQueries.find(obj => obj.id === currentQuestionIndex)) {\n                setPassedQueries([...passedQueries, \n                    {id: currentQuestionIndex, isCorrect: true}\n                ]);\n                    \n                console.log('----------passedQueries----------');\n                console.log('passedQueries: ', passedQueries);\n            }\n        } else {\n            console.log('Incorrect');\n            onHandleChecker(false);\n            if (!passedQueries.find(obj => obj.id === currentQuestionIndex)) {\n                setPassedQueries([...passedQueries, \n                    {id: currentQuestionIndex, isCorrect: false}\n                ]);\n                    \n                console.log('----------passedQueries----------');\n                console.log('passedQueries: ', passedQueries);\n            }\n        }\n\n        setCurrentQuestionId(parseInt(currentQuestionIndex));\n    }\n\n    React.useEffect(() => {\n        onPassedQuestions(passedQueries);\n    }, [passedQueries]);\n\n    React.useEffect(() => {\n        onChoiceClick(selectedOption);\n    }, [selectedOption, onChoiceClick]);\n\n    onChoiceClick = (index) => {\n        console.log('----------index----------');\n        console.log('index: ', index);\n        if (parseInt(index) === parseInt(correctAnswer)) {\n            console.log('Correct');\n            onHandleChecker(true);\n            if (!passedQueries.find(obj => obj.id === currentQuestionIndex)) {\n                setPassedQueries([...passedQueries, \n                    {id: currentQuestionIndex, isCorrect: true}\n                ]);\n                    \n                console.log('----------passedQueries----------');\n                console.log('passedQueries: ', passedQueries);\n            }\n            return true;\n        } else {\n            console.log('Incorrect');\n            onHandleChecker(false);\n            if (!passedQueries.find(obj => obj.id === currentQuestionIndex)) {\n                setPassedQueries([...passedQueries, \n                    {id: currentQuestionIndex, isCorrect: false}\n                ]);\n                    \n                console.log('----------passedQueries----------');\n                console.log('passedQueries: ', passedQueries);\n            }\n            return false;\n        }\n    }\n\n    return (\n        <div \n            className='col-12 col-lg-6'>\n            {Object.entries(options).map(([key, value]) => (\n                <button \n                    disabled={passedQueries.includes(parseInt(currentQuestionIndex))}\n                    data-bs-toggle\n                    onClick={() => onOptionClick(key)}\n                    id={key}\n                    className={`` \n                        + `${key === selectedOption ? \n                            (passedQueries.find(obj => obj.id === currentQuestionIndex) ? \n                            (onChoiceClick(key) ? colors.query_br_Green : colors.query_br_Red) : \n                            'rounded-md outline-none cursor-pointer shadow-md hover:shadow-xl transition text-start') : 'rounded-md outline-none cursor-pointer shadow-md hover:shadow-xl transition text-start'\n                        }`}\n                    style={{\n                        fontSize: '16px',\n                        color: colors.const_dark_text,\n                        width: '100%',\n                        marginTop: '20px',\n                        padding: '10px 20px',\n                    }}\n                    key={key}>\n                        {value}\n                </button>\n            ))}\n        </div>\n    );\n}\n\nexport default MultipleChoiceQ;\n",
					"snippet": "<b>import React</b> from 'react';"
				},
				"path": {
					"raw": "frontend/src/components/MultipleChoiceQ.js"
				},
				"repo": {
					"raw": "abdibrokhim/AutoTestExam"
				},
				"total_matches": {
					"raw": 1
				}
			},
			{
				"content": {
					"full": "<b>import React</b>, { useState, useEffect } from 'react';\nimport Image from 'next/image';\n\nconst OverlayCard = () => {\n  const [showOverlay, setShowOverlay] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowOverlay(true);\n    }, 2000); // Show after 2 seconds\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleClose = () => {\n    setShowOverlay(false);\n\n    // Show the overlay again after 5 minutes\n    setTimeout(showAgain, 300000); // 5 minutes\n  };\n\n  const showAgain = () => {\n    setShowOverlay(true);\n  }\n\n  if (!showOverlay) return null;\n\n  return (\n    <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\">\n      <div className=\"relative bg-[#1f2024] rounded-md p-4\">\n        {/* Close Button */}\n        <button\n          onClick={handleClose}\n          aria-label=\"Close Sidebar\"\n          className=\"absolute top-2 right-2 hover:bg-[#A1A2A5] hover:bg-opacity-10 rounded-full p-3\"\n        >\n          <Image\n            aria-hidden\n            src=\"/close.svg\"\n            alt=\"close icon\"\n            width={22}\n            height={22}\n          />\n        </button>\n\n        {/* Image */}\n        <Image\n          src=\"/intro.png\"\n          alt=\"Intro Image\"\n          width={400}\n          height={300}\n          className=\"mb-4 rounded-md\"\n        />\n\n        {/* Navigation Link */}\n        <div\n          className=\"flex flex-row gap-2 bg-[#A1A2A5] text-black w-full items-center justify-center py-2 rounded-lg text-md font-bold hover:bg-[#BBBCBE] transition cursor-pointer\"\n        >\n          <a\n            href=\"https://theopencommunity.co\"\n            className=\"text-[#000000] hover:underline font-bold\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Get Early Access\n          </a>\n          <Image\n            aria-hidden\n            src=\"/arrow-top.svg\"\n            alt=\"Demo icon\"\n            width={22}\n            height={22}\n            className=\"inline\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OverlayCard;",
					"snippet": "<b>import React</b>, { useState, useEffect } from 'react';"
				},
				"path": {
					"raw": "src/app/overlaycard.tsx"
				},
				"repo": {
					"raw": "abdibrokhim/humanaize"
				},
				"total_matches": {
					"raw": 1
				}
			}
		],
		"time": "52.277542667s"
	}
}
